
Practice Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008cc  08005580  08005580  00015580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e4c  08005e4c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005e4c  08005e4c  00015e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e54  08005e54  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e54  08005e54  00015e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e58  08005e58  00015e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000001dc  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000254  20000254  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000118c4  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023bb  00000000  00000000  0003196c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e98  00000000  00000000  00033d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d88  00000000  00000000  00034bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020297  00000000  00000000  00035948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f878  00000000  00000000  00055bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3d7a  00000000  00000000  00065457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001291d1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000417c  00000000  00000000  00129224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005568 	.word	0x08005568

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005568 	.word	0x08005568

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <spi1_communication>:
function :	SPI1 send data
parameter:
send_char:	sned data
******************************************************************************/
uint8_t spi1_communication(uint8_t send_char)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	uint8_t chRetry = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	73fb      	strb	r3, [r7, #15]
	uint8_t chTemp = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	73bb      	strb	r3, [r7, #14]

	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX) {
 800057a:	e007      	b.n	800058c <spi1_communication+0x24>
		if (++ chRetry > 200) {
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	3301      	adds	r3, #1
 8000580:	73fb      	strb	r3, [r7, #15]
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	2bc8      	cmp	r3, #200	; 0xc8
 8000586:	d901      	bls.n	800058c <spi1_communication+0x24>
			return 0;
 8000588:	2300      	movs	r3, #0
 800058a:	e02d      	b.n	80005e8 <spi1_communication+0x80>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX) {
 800058c:	4818      	ldr	r0, [pc, #96]	; (80005f0 <spi1_communication+0x88>)
 800058e:	f003 fdcb 	bl	8004128 <HAL_SPI_GetState>
 8000592:	4603      	mov	r3, r0
 8000594:	2b03      	cmp	r3, #3
 8000596:	d0f1      	beq.n	800057c <spi1_communication+0x14>
		}
	}

	HAL_SPI_Transmit(&hspi1, &send_char, 1, 1000);
 8000598:	1df9      	adds	r1, r7, #7
 800059a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059e:	2201      	movs	r2, #1
 80005a0:	4813      	ldr	r0, [pc, #76]	; (80005f0 <spi1_communication+0x88>)
 80005a2:	f003 f9d2 	bl	800394a <HAL_SPI_Transmit>

	chRetry=0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	73fb      	strb	r3, [r7, #15]
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_RX) {
 80005aa:	e007      	b.n	80005bc <spi1_communication+0x54>
		if (++ chRetry > 200) {
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	3301      	adds	r3, #1
 80005b0:	73fb      	strb	r3, [r7, #15]
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	2bc8      	cmp	r3, #200	; 0xc8
 80005b6:	d901      	bls.n	80005bc <spi1_communication+0x54>
			return 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	e015      	b.n	80005e8 <spi1_communication+0x80>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_RX) {
 80005bc:	480c      	ldr	r0, [pc, #48]	; (80005f0 <spi1_communication+0x88>)
 80005be:	f003 fdb3 	bl	8004128 <HAL_SPI_GetState>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b04      	cmp	r3, #4
 80005c6:	d0f1      	beq.n	80005ac <spi1_communication+0x44>
		}
	}

	HAL_SPI_Receive(&hspi1, &chTemp, 1, 1000);
 80005c8:	f107 010e 	add.w	r1, r7, #14
 80005cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d0:	2201      	movs	r2, #1
 80005d2:	4807      	ldr	r0, [pc, #28]	; (80005f0 <spi1_communication+0x88>)
 80005d4:	f003 faf5 	bl	8003bc2 <HAL_SPI_Receive>

	/* Wait until the BSY flag is set */
	while(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY) {
 80005d8:	bf00      	nop
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <spi1_communication+0x88>)
 80005dc:	f003 fda4 	bl	8004128 <HAL_SPI_GetState>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d0f9      	beq.n	80005da <spi1_communication+0x72>

	}

	return chTemp;
 80005e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2000013c 	.word	0x2000013c

080005f4 <lcd_write_byte>:
parameter:
  chByte : send data
  chCmd  : command or data
******************************************************************************/
void lcd_write_byte(uint8_t chByte, uint8_t chCmd)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	460a      	mov	r2, r1
 80005fe:	71fb      	strb	r3, [r7, #7]
 8000600:	4613      	mov	r3, r2
 8000602:	71bb      	strb	r3, [r7, #6]
    if (chCmd) {
 8000604:	79bb      	ldrb	r3, [r7, #6]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d006      	beq.n	8000618 <lcd_write_byte+0x24>
        LCD_DC_H();
 800060a:	2201      	movs	r2, #1
 800060c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000610:	480d      	ldr	r0, [pc, #52]	; (8000648 <lcd_write_byte+0x54>)
 8000612:	f002 fcc9 	bl	8002fa8 <HAL_GPIO_WritePin>
 8000616:	e005      	b.n	8000624 <lcd_write_byte+0x30>
    } else {
        LCD_DC_L();
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061e:	480a      	ldr	r0, [pc, #40]	; (8000648 <lcd_write_byte+0x54>)
 8000620:	f002 fcc2 	bl	8002fa8 <HAL_GPIO_WritePin>
    }

    LCD_CS_L();
 8000624:	2200      	movs	r2, #0
 8000626:	2180      	movs	r1, #128	; 0x80
 8000628:	4807      	ldr	r0, [pc, #28]	; (8000648 <lcd_write_byte+0x54>)
 800062a:	f002 fcbd 	bl	8002fa8 <HAL_GPIO_WritePin>
    spi1_communication(chByte);
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ff99 	bl	8000568 <spi1_communication>
    LCD_CS_H();
 8000636:	2201      	movs	r2, #1
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	4803      	ldr	r0, [pc, #12]	; (8000648 <lcd_write_byte+0x54>)
 800063c:	f002 fcb4 	bl	8002fa8 <HAL_GPIO_WritePin>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40020400 	.word	0x40020400

0800064c <lcd_write_command>:
parameter:
     chByte : send data
		 chCmd  : command or data
******************************************************************************/
void lcd_write_command(uint8_t chRegister, uint8_t chValue)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	460a      	mov	r2, r1
 8000656:	71fb      	strb	r3, [r7, #7]
 8000658:	4613      	mov	r3, r2
 800065a:	71bb      	strb	r3, [r7, #6]
	lcd_write_byte(chRegister, LCD_CMD);
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ffc7 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8000666:	79bb      	ldrb	r3, [r7, #6]
 8000668:	2101      	movs	r1, #1
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ffc2 	bl	80005f4 <lcd_write_byte>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <delay_ms>:
/******************************************************************************
Function Name  : delay
			parameter: ms
******************************************************************************/
void delay_ms(uint32_t ms)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	uint32_t j=5000;
 8000680:	f241 3388 	movw	r3, #5000	; 0x1388
 8000684:	60fb      	str	r3, [r7, #12]
	for(;ms>2;ms--)
 8000686:	e008      	b.n	800069a <delay_ms+0x22>
		for(;j>2;j--){
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3b01      	subs	r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	2b02      	cmp	r3, #2
 8000692:	d8f9      	bhi.n	8000688 <delay_ms+0x10>
	for(;ms>2;ms--)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3b01      	subs	r3, #1
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b02      	cmp	r3, #2
 800069e:	d8f6      	bhi.n	800068e <delay_ms+0x16>

		}
}
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
	...

080006b0 <lcd_init>:
/******************************************************************************
Function Name  : initials lcd control pin
			parameter:
******************************************************************************/
void lcd_init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	LCD_RST_H();
 80006b4:	2201      	movs	r2, #1
 80006b6:	2104      	movs	r1, #4
 80006b8:	4881      	ldr	r0, [pc, #516]	; (80008c0 <lcd_init+0x210>)
 80006ba:	f002 fc75 	bl	8002fa8 <HAL_GPIO_WritePin>
	LCD_CS_H();
 80006be:	2201      	movs	r2, #1
 80006c0:	2180      	movs	r1, #128	; 0x80
 80006c2:	487f      	ldr	r0, [pc, #508]	; (80008c0 <lcd_init+0x210>)
 80006c4:	f002 fc70 	bl	8002fa8 <HAL_GPIO_WritePin>
	LCD_BKL_H();
 80006c8:	2201      	movs	r2, #1
 80006ca:	2140      	movs	r1, #64	; 0x40
 80006cc:	487c      	ldr	r0, [pc, #496]	; (80008c0 <lcd_init+0x210>)
 80006ce:	f002 fc6b 	bl	8002fa8 <HAL_GPIO_WritePin>
#ifdef 	ST7789_DEVICE
	LCD_RST_H();
 80006d2:	2201      	movs	r2, #1
 80006d4:	2104      	movs	r1, #4
 80006d6:	487a      	ldr	r0, [pc, #488]	; (80008c0 <lcd_init+0x210>)
 80006d8:	f002 fc66 	bl	8002fa8 <HAL_GPIO_WritePin>
	delay_ms(5);
 80006dc:	2005      	movs	r0, #5
 80006de:	f7ff ffcb 	bl	8000678 <delay_ms>
	LCD_RST_L();
 80006e2:	2200      	movs	r2, #0
 80006e4:	2104      	movs	r1, #4
 80006e6:	4876      	ldr	r0, [pc, #472]	; (80008c0 <lcd_init+0x210>)
 80006e8:	f002 fc5e 	bl	8002fa8 <HAL_GPIO_WritePin>
	delay_ms(5);
 80006ec:	2005      	movs	r0, #5
 80006ee:	f7ff ffc3 	bl	8000678 <delay_ms>
	LCD_RST_H();
 80006f2:	2201      	movs	r2, #1
 80006f4:	2104      	movs	r1, #4
 80006f6:	4872      	ldr	r0, [pc, #456]	; (80008c0 <lcd_init+0x210>)
 80006f8:	f002 fc56 	bl	8002fa8 <HAL_GPIO_WritePin>
	delay_ms(5);
 80006fc:	2005      	movs	r0, #5
 80006fe:	f7ff ffbb 	bl	8000678 <delay_ms>
	LCD_CS_H();
 8000702:	2201      	movs	r2, #1
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	486e      	ldr	r0, [pc, #440]	; (80008c0 <lcd_init+0x210>)
 8000708:	f002 fc4e 	bl	8002fa8 <HAL_GPIO_WritePin>
	lcd_write_command(0x07,0x00);
	lcd_write_command(0x08,0x01);
	lcd_write_command(0x09,0x3F);

#elif defined ST7789_DEVICE
	lcd_write_byte(0x11,LCD_CMD);
 800070c:	2100      	movs	r1, #0
 800070e:	2011      	movs	r0, #17
 8000710:	f7ff ff70 	bl	80005f4 <lcd_write_byte>
	delay_ms(10);
 8000714:	200a      	movs	r0, #10
 8000716:	f7ff ffaf 	bl	8000678 <delay_ms>
	lcd_write_command(0x36,0x00);
 800071a:	2100      	movs	r1, #0
 800071c:	2036      	movs	r0, #54	; 0x36
 800071e:	f7ff ff95 	bl	800064c <lcd_write_command>
	lcd_write_command(0x3a,0x05);
 8000722:	2105      	movs	r1, #5
 8000724:	203a      	movs	r0, #58	; 0x3a
 8000726:	f7ff ff91 	bl	800064c <lcd_write_command>
	lcd_write_byte(0xb2,LCD_CMD);
 800072a:	2100      	movs	r1, #0
 800072c:	20b2      	movs	r0, #178	; 0xb2
 800072e:	f7ff ff61 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x0c,LCD_DATA);
 8000732:	2101      	movs	r1, #1
 8000734:	200c      	movs	r0, #12
 8000736:	f7ff ff5d 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x0c,LCD_DATA);
 800073a:	2101      	movs	r1, #1
 800073c:	200c      	movs	r0, #12
 800073e:	f7ff ff59 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 8000742:	2101      	movs	r1, #1
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff ff55 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x33,LCD_DATA);
 800074a:	2101      	movs	r1, #1
 800074c:	2033      	movs	r0, #51	; 0x33
 800074e:	f7ff ff51 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x33,LCD_DATA);
 8000752:	2101      	movs	r1, #1
 8000754:	2033      	movs	r0, #51	; 0x33
 8000756:	f7ff ff4d 	bl	80005f4 <lcd_write_byte>
	lcd_write_command(0xb7,0x35);
 800075a:	2135      	movs	r1, #53	; 0x35
 800075c:	20b7      	movs	r0, #183	; 0xb7
 800075e:	f7ff ff75 	bl	800064c <lcd_write_command>
	lcd_write_command(0xbb,0x28);
 8000762:	2128      	movs	r1, #40	; 0x28
 8000764:	20bb      	movs	r0, #187	; 0xbb
 8000766:	f7ff ff71 	bl	800064c <lcd_write_command>
	lcd_write_command(0xc0,0x3c);
 800076a:	213c      	movs	r1, #60	; 0x3c
 800076c:	20c0      	movs	r0, #192	; 0xc0
 800076e:	f7ff ff6d 	bl	800064c <lcd_write_command>
	lcd_write_command(0xc2,0x01);
 8000772:	2101      	movs	r1, #1
 8000774:	20c2      	movs	r0, #194	; 0xc2
 8000776:	f7ff ff69 	bl	800064c <lcd_write_command>
	lcd_write_command(0xc3,0x0b);
 800077a:	210b      	movs	r1, #11
 800077c:	20c3      	movs	r0, #195	; 0xc3
 800077e:	f7ff ff65 	bl	800064c <lcd_write_command>
	lcd_write_command(0xc4,0x20);
 8000782:	2120      	movs	r1, #32
 8000784:	20c4      	movs	r0, #196	; 0xc4
 8000786:	f7ff ff61 	bl	800064c <lcd_write_command>
	lcd_write_command(0xc6,0x0f);
 800078a:	210f      	movs	r1, #15
 800078c:	20c6      	movs	r0, #198	; 0xc6
 800078e:	f7ff ff5d 	bl	800064c <lcd_write_command>
	lcd_write_byte(0xD0,LCD_CMD);
 8000792:	2100      	movs	r1, #0
 8000794:	20d0      	movs	r0, #208	; 0xd0
 8000796:	f7ff ff2d 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0xa4,LCD_DATA);
 800079a:	2101      	movs	r1, #1
 800079c:	20a4      	movs	r0, #164	; 0xa4
 800079e:	f7ff ff29 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0xa1,LCD_DATA);
 80007a2:	2101      	movs	r1, #1
 80007a4:	20a1      	movs	r0, #161	; 0xa1
 80007a6:	f7ff ff25 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0xe0,LCD_CMD);
 80007aa:	2100      	movs	r1, #0
 80007ac:	20e0      	movs	r0, #224	; 0xe0
 80007ae:	f7ff ff21 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0xd0,LCD_DATA);
 80007b2:	2101      	movs	r1, #1
 80007b4:	20d0      	movs	r0, #208	; 0xd0
 80007b6:	f7ff ff1d 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x01,LCD_DATA);
 80007ba:	2101      	movs	r1, #1
 80007bc:	2001      	movs	r0, #1
 80007be:	f7ff ff19 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x08,LCD_DATA);
 80007c2:	2101      	movs	r1, #1
 80007c4:	2008      	movs	r0, #8
 80007c6:	f7ff ff15 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x0f,LCD_DATA);
 80007ca:	2101      	movs	r1, #1
 80007cc:	200f      	movs	r0, #15
 80007ce:	f7ff ff11 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x11,LCD_DATA);
 80007d2:	2101      	movs	r1, #1
 80007d4:	2011      	movs	r0, #17
 80007d6:	f7ff ff0d 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x2a,LCD_DATA);
 80007da:	2101      	movs	r1, #1
 80007dc:	202a      	movs	r0, #42	; 0x2a
 80007de:	f7ff ff09 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x36,LCD_DATA);
 80007e2:	2101      	movs	r1, #1
 80007e4:	2036      	movs	r0, #54	; 0x36
 80007e6:	f7ff ff05 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x55,LCD_DATA);
 80007ea:	2101      	movs	r1, #1
 80007ec:	2055      	movs	r0, #85	; 0x55
 80007ee:	f7ff ff01 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x44,LCD_DATA);
 80007f2:	2101      	movs	r1, #1
 80007f4:	2044      	movs	r0, #68	; 0x44
 80007f6:	f7ff fefd 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x3a,LCD_DATA);
 80007fa:	2101      	movs	r1, #1
 80007fc:	203a      	movs	r0, #58	; 0x3a
 80007fe:	f7ff fef9 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x0b,LCD_DATA);
 8000802:	2101      	movs	r1, #1
 8000804:	200b      	movs	r0, #11
 8000806:	f7ff fef5 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x06,LCD_DATA);
 800080a:	2101      	movs	r1, #1
 800080c:	2006      	movs	r0, #6
 800080e:	f7ff fef1 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x11,LCD_DATA);
 8000812:	2101      	movs	r1, #1
 8000814:	2011      	movs	r0, #17
 8000816:	f7ff feed 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x20,LCD_DATA);
 800081a:	2101      	movs	r1, #1
 800081c:	2020      	movs	r0, #32
 800081e:	f7ff fee9 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0xe1,LCD_CMD);
 8000822:	2100      	movs	r1, #0
 8000824:	20e1      	movs	r0, #225	; 0xe1
 8000826:	f7ff fee5 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0xd0,LCD_DATA);
 800082a:	2101      	movs	r1, #1
 800082c:	20d0      	movs	r0, #208	; 0xd0
 800082e:	f7ff fee1 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x02,LCD_DATA);
 8000832:	2101      	movs	r1, #1
 8000834:	2002      	movs	r0, #2
 8000836:	f7ff fedd 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x07,LCD_DATA);
 800083a:	2101      	movs	r1, #1
 800083c:	2007      	movs	r0, #7
 800083e:	f7ff fed9 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x0a,LCD_DATA);
 8000842:	2101      	movs	r1, #1
 8000844:	200a      	movs	r0, #10
 8000846:	f7ff fed5 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x0b,LCD_DATA);
 800084a:	2101      	movs	r1, #1
 800084c:	200b      	movs	r0, #11
 800084e:	f7ff fed1 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x18,LCD_DATA);
 8000852:	2101      	movs	r1, #1
 8000854:	2018      	movs	r0, #24
 8000856:	f7ff fecd 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x34,LCD_DATA);
 800085a:	2101      	movs	r1, #1
 800085c:	2034      	movs	r0, #52	; 0x34
 800085e:	f7ff fec9 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x43,LCD_DATA);
 8000862:	2101      	movs	r1, #1
 8000864:	2043      	movs	r0, #67	; 0x43
 8000866:	f7ff fec5 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x4a,LCD_DATA);
 800086a:	2101      	movs	r1, #1
 800086c:	204a      	movs	r0, #74	; 0x4a
 800086e:	f7ff fec1 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x2b,LCD_DATA);
 8000872:	2101      	movs	r1, #1
 8000874:	202b      	movs	r0, #43	; 0x2b
 8000876:	f7ff febd 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x1b,LCD_DATA);
 800087a:	2101      	movs	r1, #1
 800087c:	201b      	movs	r0, #27
 800087e:	f7ff feb9 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x1c,LCD_DATA);
 8000882:	2101      	movs	r1, #1
 8000884:	201c      	movs	r0, #28
 8000886:	f7ff feb5 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x22,LCD_DATA);
 800088a:	2101      	movs	r1, #1
 800088c:	2022      	movs	r0, #34	; 0x22
 800088e:	f7ff feb1 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x1f,LCD_DATA);
 8000892:	2101      	movs	r1, #1
 8000894:	201f      	movs	r0, #31
 8000896:	f7ff fead 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x29,LCD_CMD);
 800089a:	2100      	movs	r1, #0
 800089c:	2029      	movs	r0, #41	; 0x29
 800089e:	f7ff fea9 	bl	80005f4 <lcd_write_byte>
	lcd_write_command(0x51,0xff);
 80008a2:	21ff      	movs	r1, #255	; 0xff
 80008a4:	2051      	movs	r0, #81	; 0x51
 80008a6:	f7ff fed1 	bl	800064c <lcd_write_command>
	lcd_write_command(0x55,0xB0);
 80008aa:	21b0      	movs	r1, #176	; 0xb0
 80008ac:	2055      	movs	r0, #85	; 0x55
 80008ae:	f7ff fecd 	bl	800064c <lcd_write_command>
#endif

	lcd_clear_screen(WHITE);
 80008b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80008b6:	f000 f805 	bl	80008c4 <lcd_clear_screen>
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40020400 	.word	0x40020400

080008c4 <lcd_clear_screen>:
Function Name  : clear lcd screen
			parameter:
				hwColor: background color
******************************************************************************/
void lcd_clear_screen(uint16_t hwColor)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	80fb      	strh	r3, [r7, #6]
	uint32_t i, wCount = LCD_WIDTH;
 80008ce:	23f0      	movs	r3, #240	; 0xf0
 80008d0:	60bb      	str	r3, [r7, #8]
	wCount *= LCD_HEIGHT;
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	4613      	mov	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	4413      	add	r3, r2
 80008da:	019b      	lsls	r3, r3, #6
 80008dc:	60bb      	str	r3, [r7, #8]

#ifdef HX8347D_DEVICE
	lcd_set_cursor(0, 0);
	lcd_write_byte(0x22, LCD_CMD);
#elif defined ST7789_DEVICE
	lcd_write_byte(0x2A,LCD_CMD);
 80008de:	2100      	movs	r1, #0
 80008e0:	202a      	movs	r0, #42	; 0x2a
 80008e2:	f7ff fe87 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80008e6:	2101      	movs	r1, #1
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff fe83 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80008ee:	2101      	movs	r1, #1
 80008f0:	2000      	movs	r0, #0
 80008f2:	f7ff fe7f 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80008f6:	2101      	movs	r1, #1
 80008f8:	2000      	movs	r0, #0
 80008fa:	f7ff fe7b 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte((LCD_WIDTH-1)&0xff,LCD_DATA);
 80008fe:	2101      	movs	r1, #1
 8000900:	20ef      	movs	r0, #239	; 0xef
 8000902:	f7ff fe77 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x2B,LCD_CMD);
 8000906:	2100      	movs	r1, #0
 8000908:	202b      	movs	r0, #43	; 0x2b
 800090a:	f7ff fe73 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 800090e:	2101      	movs	r1, #1
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff fe6f 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 8000916:	2101      	movs	r1, #1
 8000918:	2000      	movs	r0, #0
 800091a:	f7ff fe6b 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(((LCD_HEIGHT-1)>>8)&0xff,LCD_DATA);
 800091e:	2101      	movs	r1, #1
 8000920:	2001      	movs	r0, #1
 8000922:	f7ff fe67 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte((LCD_HEIGHT-1)&0xff,LCD_DATA);
 8000926:	2101      	movs	r1, #1
 8000928:	203f      	movs	r0, #63	; 0x3f
 800092a:	f7ff fe63 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x2C,LCD_CMD);
 800092e:	2100      	movs	r1, #0
 8000930:	202c      	movs	r0, #44	; 0x2c
 8000932:	f7ff fe5f 	bl	80005f4 <lcd_write_byte>
#endif
	LCD_CS_L();
 8000936:	2200      	movs	r2, #0
 8000938:	2180      	movs	r1, #128	; 0x80
 800093a:	4814      	ldr	r0, [pc, #80]	; (800098c <lcd_clear_screen+0xc8>)
 800093c:	f002 fb34 	bl	8002fa8 <HAL_GPIO_WritePin>
	LCD_DC_H();
 8000940:	2201      	movs	r2, #1
 8000942:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000946:	4811      	ldr	r0, [pc, #68]	; (800098c <lcd_clear_screen+0xc8>)
 8000948:	f002 fb2e 	bl	8002fa8 <HAL_GPIO_WritePin>
	for(i=0;i<wCount;i++){
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	e00e      	b.n	8000970 <lcd_clear_screen+0xac>
//		spi1_communication(hwColor>>8);

		spi1_communication(hwColor>>8);
		spi1_communication((uint8_t)(hwColor&0xff));
#elif defined ST7789_DEVICE
		spi1_communication(hwColor>>8);
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	0a1b      	lsrs	r3, r3, #8
 8000956:	b29b      	uxth	r3, r3
 8000958:	b2db      	uxtb	r3, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fe04 	bl	8000568 <spi1_communication>
		spi1_communication((uint8_t)(hwColor&0xff));
 8000960:	88fb      	ldrh	r3, [r7, #6]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fdff 	bl	8000568 <spi1_communication>
	for(i=0;i<wCount;i++){
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	3301      	adds	r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fa      	ldr	r2, [r7, #12]
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	429a      	cmp	r2, r3
 8000976:	d3ec      	bcc.n	8000952 <lcd_clear_screen+0x8e>
#endif
	}
	LCD_CS_H();
 8000978:	2201      	movs	r2, #1
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	4803      	ldr	r0, [pc, #12]	; (800098c <lcd_clear_screen+0xc8>)
 800097e:	f002 fb13 	bl	8002fa8 <HAL_GPIO_WritePin>
}
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40020400 	.word	0x40020400

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b092      	sub	sp, #72	; 0x48
 8000994:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000996:	f001 f92b 	bl	8001bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099a:	f000 f96f 	bl	8000c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099e:	f000 faf3 	bl	8000f88 <MX_GPIO_Init>
  MX_CAN1_Init();
 80009a2:	f000 f9c9 	bl	8000d38 <MX_CAN1_Init>
  MX_TIM2_Init();
 80009a6:	f000 faa3 	bl	8000ef0 <MX_TIM2_Init>
  MX_SPI1_Init();
 80009aa:	f000 fa6b 	bl	8000e84 <MX_SPI1_Init>
  MX_CAN2_Init();
 80009ae:	f000 fa15 	bl	8000ddc <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_CAN_Start(&hcan1)==HAL_ERROR){
 80009b2:	489c      	ldr	r0, [pc, #624]	; (8000c24 <main+0x294>)
 80009b4:	f001 fb8e 	bl	80020d4 <HAL_CAN_Start>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d114      	bne.n	80009e8 <main+0x58>
	  while(1){
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80009be:	2101      	movs	r1, #1
 80009c0:	4899      	ldr	r0, [pc, #612]	; (8000c28 <main+0x298>)
 80009c2:	f002 fb0a 	bl	8002fda <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80009c6:	2102      	movs	r1, #2
 80009c8:	4897      	ldr	r0, [pc, #604]	; (8000c28 <main+0x298>)
 80009ca:	f002 fb06 	bl	8002fda <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80009ce:	2104      	movs	r1, #4
 80009d0:	4895      	ldr	r0, [pc, #596]	; (8000c28 <main+0x298>)
 80009d2:	f002 fb02 	bl	8002fda <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80009d6:	2108      	movs	r1, #8
 80009d8:	4893      	ldr	r0, [pc, #588]	; (8000c28 <main+0x298>)
 80009da:	f002 fafe 	bl	8002fda <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 80009de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e2:	f001 f977 	bl	8001cd4 <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80009e6:	e7ea      	b.n	80009be <main+0x2e>
	  }
  }
  if(HAL_CAN_Start(&hcan2)==HAL_ERROR){
 80009e8:	4890      	ldr	r0, [pc, #576]	; (8000c2c <main+0x29c>)
 80009ea:	f001 fb73 	bl	80020d4 <HAL_CAN_Start>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d120      	bne.n	8000a36 <main+0xa6>
  	  while(1){
  		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80009f4:	2101      	movs	r1, #1
 80009f6:	488c      	ldr	r0, [pc, #560]	; (8000c28 <main+0x298>)
 80009f8:	f002 faef 	bl	8002fda <HAL_GPIO_TogglePin>
  		  HAL_Delay(500);
 80009fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a00:	f001 f968 	bl	8001cd4 <HAL_Delay>
  		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000a04:	2102      	movs	r1, #2
 8000a06:	4888      	ldr	r0, [pc, #544]	; (8000c28 <main+0x298>)
 8000a08:	f002 fae7 	bl	8002fda <HAL_GPIO_TogglePin>
  		  HAL_Delay(500);
 8000a0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a10:	f001 f960 	bl	8001cd4 <HAL_Delay>
  		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8000a14:	2104      	movs	r1, #4
 8000a16:	4884      	ldr	r0, [pc, #528]	; (8000c28 <main+0x298>)
 8000a18:	f002 fadf 	bl	8002fda <HAL_GPIO_TogglePin>
  		  HAL_Delay(500);
 8000a1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a20:	f001 f958 	bl	8001cd4 <HAL_Delay>
  		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000a24:	2108      	movs	r1, #8
 8000a26:	4880      	ldr	r0, [pc, #512]	; (8000c28 <main+0x298>)
 8000a28:	f002 fad7 	bl	8002fda <HAL_GPIO_TogglePin>
  		  HAL_Delay(500);
 8000a2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a30:	f001 f950 	bl	8001cd4 <HAL_Delay>
  		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000a34:	e7de      	b.n	80009f4 <main+0x64>
  	  }
    }
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a36:	2102      	movs	r1, #2
 8000a38:	487a      	ldr	r0, [pc, #488]	; (8000c24 <main+0x294>)
 8000a3a:	f001 fdb1 	bl	80025a0 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a3e:	2102      	movs	r1, #2
 8000a40:	487a      	ldr	r0, [pc, #488]	; (8000c2c <main+0x29c>)
 8000a42:	f001 fdad 	bl	80025a0 <HAL_CAN_ActivateNotification>
  HAL_TIM_Base_Start_IT(&htim2);
 8000a46:	487a      	ldr	r0, [pc, #488]	; (8000c30 <main+0x2a0>)
 8000a48:	f003 fcfc 	bl	8004444 <HAL_TIM_Base_Start_IT>

  TxHeader.DLC = 8;
 8000a4c:	4b79      	ldr	r3, [pc, #484]	; (8000c34 <main+0x2a4>)
 8000a4e:	2208      	movs	r2, #8
 8000a50:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000a52:	4b78      	ldr	r3, [pc, #480]	; (8000c34 <main+0x2a4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000a58:	4b76      	ldr	r3, [pc, #472]	; (8000c34 <main+0x2a4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x012;
 8000a5e:	4b75      	ldr	r3, [pc, #468]	; (8000c34 <main+0x2a4>)
 8000a60:	2212      	movs	r2, #18
 8000a62:	601a      	str	r2, [r3, #0]

  TxHeader2.DLC = 8;
 8000a64:	4b74      	ldr	r3, [pc, #464]	; (8000c38 <main+0x2a8>)
 8000a66:	2208      	movs	r2, #8
 8000a68:	611a      	str	r2, [r3, #16]
  TxHeader2.IDE = CAN_ID_STD;
 8000a6a:	4b73      	ldr	r3, [pc, #460]	; (8000c38 <main+0x2a8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  TxHeader2.RTR = CAN_RTR_DATA;
 8000a70:	4b71      	ldr	r3, [pc, #452]	; (8000c38 <main+0x2a8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  TxHeader2.StdId = 0x0A2;
 8000a76:	4b70      	ldr	r3, [pc, #448]	; (8000c38 <main+0x2a8>)
 8000a78:	22a2      	movs	r2, #162	; 0xa2
 8000a7a:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer0(50);
 8000a7c:	2032      	movs	r0, #50	; 0x32
 8000a7e:	f000 fb2d 	bl	80010dc <setTimer0>
  setTimer1(20);
 8000a82:	2014      	movs	r0, #20
 8000a84:	f000 fb46 	bl	8001114 <setTimer1>


  lcd_init();
 8000a88:	f7ff fe12 	bl	80006b0 <lcd_init>
  ST7789_Init();
 8000a8c:	f000 fce0 	bl	8001450 <ST7789_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	/* Node 1 */
	if(dataflag){
 8000a90:	4b6a      	ldr	r3, [pc, #424]	; (8000c3c <main+0x2ac>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d05f      	beq.n	8000b58 <main+0x1c8>
		dataflag = 0;
 8000a98:	4b68      	ldr	r3, [pc, #416]	; (8000c3c <main+0x2ac>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]

		TxData[0] = RxData[0];
 8000a9e:	4b68      	ldr	r3, [pc, #416]	; (8000c40 <main+0x2b0>)
 8000aa0:	781a      	ldrb	r2, [r3, #0]
 8000aa2:	4b68      	ldr	r3, [pc, #416]	; (8000c44 <main+0x2b4>)
 8000aa4:	701a      	strb	r2, [r3, #0]
		TxData[1] = RxData[1];
 8000aa6:	4b66      	ldr	r3, [pc, #408]	; (8000c40 <main+0x2b0>)
 8000aa8:	785a      	ldrb	r2, [r3, #1]
 8000aaa:	4b66      	ldr	r3, [pc, #408]	; (8000c44 <main+0x2b4>)
 8000aac:	705a      	strb	r2, [r3, #1]
		TxData[2] = TxData[0] + TxData[1];
 8000aae:	4b65      	ldr	r3, [pc, #404]	; (8000c44 <main+0x2b4>)
 8000ab0:	781a      	ldrb	r2, [r3, #0]
 8000ab2:	4b64      	ldr	r3, [pc, #400]	; (8000c44 <main+0x2b4>)
 8000ab4:	785b      	ldrb	r3, [r3, #1]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b62      	ldr	r3, [pc, #392]	; (8000c44 <main+0x2b4>)
 8000abc:	709a      	strb	r2, [r3, #2]
		TxData[7] = calc_SAE_J1850(TxData, 7);
 8000abe:	2107      	movs	r1, #7
 8000ac0:	4860      	ldr	r0, [pc, #384]	; (8000c44 <main+0x2b4>)
 8000ac2:	f000 facf 	bl	8001064 <calc_SAE_J1850>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b5e      	ldr	r3, [pc, #376]	; (8000c44 <main+0x2b4>)
 8000acc:	71da      	strb	r2, [r3, #7]

		sprintf(buffer, "Node 1: 0x0A2 value [0] = %#04x",RxData[0]);
 8000ace:	4b5c      	ldr	r3, [pc, #368]	; (8000c40 <main+0x2b0>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	495c      	ldr	r1, [pc, #368]	; (8000c48 <main+0x2b8>)
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f004 f917 	bl	8004d0c <siprintf>
		ST7789_WriteString(10, 10, buffer, Font_7x10, WHITE, BLACK);
 8000ade:	4b5b      	ldr	r3, [pc, #364]	; (8000c4c <main+0x2bc>)
 8000ae0:	1d39      	adds	r1, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	9202      	str	r2, [sp, #8]
 8000ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aea:	9201      	str	r2, [sp, #4]
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	9200      	str	r2, [sp, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	460a      	mov	r2, r1
 8000af4:	210a      	movs	r1, #10
 8000af6:	200a      	movs	r0, #10
 8000af8:	f000 fe06 	bl	8001708 <ST7789_WriteString>
		sprintf(buffer, "Node 1: 0x0A2 value [1] = %#04x",RxData[1]);
 8000afc:	4b50      	ldr	r3, [pc, #320]	; (8000c40 <main+0x2b0>)
 8000afe:	785b      	ldrb	r3, [r3, #1]
 8000b00:	461a      	mov	r2, r3
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	4952      	ldr	r1, [pc, #328]	; (8000c50 <main+0x2c0>)
 8000b06:	4618      	mov	r0, r3
 8000b08:	f004 f900 	bl	8004d0c <siprintf>
		ST7789_WriteString(10, 25, buffer, Font_7x10, WHITE, BLACK);
 8000b0c:	4b4f      	ldr	r3, [pc, #316]	; (8000c4c <main+0x2bc>)
 8000b0e:	1d39      	adds	r1, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	9202      	str	r2, [sp, #8]
 8000b14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b18:	9201      	str	r2, [sp, #4]
 8000b1a:	685a      	ldr	r2, [r3, #4]
 8000b1c:	9200      	str	r2, [sp, #0]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	460a      	mov	r2, r1
 8000b22:	2119      	movs	r1, #25
 8000b24:	200a      	movs	r0, #10
 8000b26:	f000 fdef 	bl	8001708 <ST7789_WriteString>
		sprintf(buffer, "Node 1: 0x0A2 value [6] = %#04x",RxData[6]);
 8000b2a:	4b45      	ldr	r3, [pc, #276]	; (8000c40 <main+0x2b0>)
 8000b2c:	799b      	ldrb	r3, [r3, #6]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4948      	ldr	r1, [pc, #288]	; (8000c54 <main+0x2c4>)
 8000b34:	4618      	mov	r0, r3
 8000b36:	f004 f8e9 	bl	8004d0c <siprintf>
		ST7789_WriteString(10, 40, buffer, Font_7x10, WHITE, BLACK);
 8000b3a:	4b44      	ldr	r3, [pc, #272]	; (8000c4c <main+0x2bc>)
 8000b3c:	1d39      	adds	r1, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	9202      	str	r2, [sp, #8]
 8000b42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b46:	9201      	str	r2, [sp, #4]
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	9200      	str	r2, [sp, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	460a      	mov	r2, r1
 8000b50:	2128      	movs	r1, #40	; 0x28
 8000b52:	200a      	movs	r0, #10
 8000b54:	f000 fdd8 	bl	8001708 <ST7789_WriteString>
	}

	if(timer0_flag){
 8000b58:	4b3f      	ldr	r3, [pc, #252]	; (8000c58 <main+0x2c8>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d013      	beq.n	8000b88 <main+0x1f8>
		setTimer0(50);
 8000b60:	2032      	movs	r0, #50	; 0x32
 8000b62:	f000 fabb 	bl	80010dc <setTimer0>
		if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)>0){
 8000b66:	482f      	ldr	r0, [pc, #188]	; (8000c24 <main+0x294>)
 8000b68:	f001 fbd3 	bl	8002312 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d00a      	beq.n	8000b88 <main+0x1f8>
			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox)!=HAL_OK){
 8000b72:	4b3a      	ldr	r3, [pc, #232]	; (8000c5c <main+0x2cc>)
 8000b74:	4a33      	ldr	r2, [pc, #204]	; (8000c44 <main+0x2b4>)
 8000b76:	492f      	ldr	r1, [pc, #188]	; (8000c34 <main+0x2a4>)
 8000b78:	482a      	ldr	r0, [pc, #168]	; (8000c24 <main+0x294>)
 8000b7a:	f001 faef 	bl	800215c <HAL_CAN_AddTxMessage>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <main+0x1f8>
				Error_Handler();
 8000b84:	f000 fb56 	bl	8001234 <Error_Handler>
			}
		}
	}

	/* Node 2 */
	if(dataflag2){
 8000b88:	4b35      	ldr	r3, [pc, #212]	; (8000c60 <main+0x2d0>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d01e      	beq.n	8000bce <main+0x23e>
		dataflag2 = 0;
 8000b90:	4b33      	ldr	r3, [pc, #204]	; (8000c60 <main+0x2d0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000b96:	2201      	movs	r2, #1
 8000b98:	2101      	movs	r1, #1
 8000b9a:	4823      	ldr	r0, [pc, #140]	; (8000c28 <main+0x298>)
 8000b9c:	f002 fa04 	bl	8002fa8 <HAL_GPIO_WritePin>
		// TO DO: DISPLAY ON LCD
		sprintf(buffer, "Node 2: CRC value = %#04x, VALID!",RxData2[7]);
 8000ba0:	4b30      	ldr	r3, [pc, #192]	; (8000c64 <main+0x2d4>)
 8000ba2:	79db      	ldrb	r3, [r3, #7]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	492f      	ldr	r1, [pc, #188]	; (8000c68 <main+0x2d8>)
 8000baa:	4618      	mov	r0, r3
 8000bac:	f004 f8ae 	bl	8004d0c <siprintf>
		ST7789_WriteString(10, 60, buffer, Font_7x10, WHITE, BLACK);
 8000bb0:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <main+0x2bc>)
 8000bb2:	1d39      	adds	r1, r7, #4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	9202      	str	r2, [sp, #8]
 8000bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bbc:	9201      	str	r2, [sp, #4]
 8000bbe:	685a      	ldr	r2, [r3, #4]
 8000bc0:	9200      	str	r2, [sp, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	460a      	mov	r2, r1
 8000bc6:	213c      	movs	r1, #60	; 0x3c
 8000bc8:	200a      	movs	r0, #10
 8000bca:	f000 fd9d 	bl	8001708 <ST7789_WriteString>
	}


	if(timer1_flag){
 8000bce:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <main+0x2dc>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f43f af5c 	beq.w	8000a90 <main+0x100>
		setTimer1(20);
 8000bd8:	2014      	movs	r0, #20
 8000bda:	f000 fa9b 	bl	8001114 <setTimer1>
		if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan2)>0){
 8000bde:	4813      	ldr	r0, [pc, #76]	; (8000c2c <main+0x29c>)
 8000be0:	f001 fb97 	bl	8002312 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f43f af52 	beq.w	8000a90 <main+0x100>
			TxData2[0] = 0x01;
 8000bec:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <main+0x2e0>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
			TxData2[1] = 0x04;
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <main+0x2e0>)
 8000bf4:	2204      	movs	r2, #4
 8000bf6:	705a      	strb	r2, [r3, #1]
			TxData2[6] = data2counter++;
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <main+0x2e4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	1c5a      	adds	r2, r3, #1
 8000bfe:	491d      	ldr	r1, [pc, #116]	; (8000c74 <main+0x2e4>)
 8000c00:	600a      	str	r2, [r1, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <main+0x2e0>)
 8000c06:	719a      	strb	r2, [r3, #6]
			if(HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData2, &TxMailbox2)!=HAL_OK){
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <main+0x2e8>)
 8000c0a:	4a19      	ldr	r2, [pc, #100]	; (8000c70 <main+0x2e0>)
 8000c0c:	490a      	ldr	r1, [pc, #40]	; (8000c38 <main+0x2a8>)
 8000c0e:	4807      	ldr	r0, [pc, #28]	; (8000c2c <main+0x29c>)
 8000c10:	f001 faa4 	bl	800215c <HAL_CAN_AddTxMessage>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f43f af3a 	beq.w	8000a90 <main+0x100>
				Error_Handler();
 8000c1c:	f000 fb0a 	bl	8001234 <Error_Handler>
	if(dataflag){
 8000c20:	e736      	b.n	8000a90 <main+0x100>
 8000c22:	bf00      	nop
 8000c24:	200001e4 	.word	0x200001e4
 8000c28:	40020400 	.word	0x40020400
 8000c2c:	2000010c 	.word	0x2000010c
 8000c30:	2000019c 	.word	0x2000019c
 8000c34:	2000020c 	.word	0x2000020c
 8000c38:	200000d0 	.word	0x200000d0
 8000c3c:	200000a4 	.word	0x200000a4
 8000c40:	20000194 	.word	0x20000194
 8000c44:	20000094 	.word	0x20000094
 8000c48:	08005580 	.word	0x08005580
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	080055a0 	.word	0x080055a0
 8000c54:	080055c0 	.word	0x080055c0
 8000c58:	200000ac 	.word	0x200000ac
 8000c5c:	20000138 	.word	0x20000138
 8000c60:	200000a8 	.word	0x200000a8
 8000c64:	200000e8 	.word	0x200000e8
 8000c68:	080055e0 	.word	0x080055e0
 8000c6c:	200000b4 	.word	0x200000b4
 8000c70:	2000009c 	.word	0x2000009c
 8000c74:	200000bc 	.word	0x200000bc
 8000c78:	20000134 	.word	0x20000134

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b094      	sub	sp, #80	; 0x50
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0320 	add.w	r3, r7, #32
 8000c86:	2230      	movs	r2, #48	; 0x30
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f004 f836 	bl	8004cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <SystemClock_Config+0xb4>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	4a21      	ldr	r2, [pc, #132]	; (8000d30 <SystemClock_Config+0xb4>)
 8000caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cae:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <SystemClock_Config+0xb4>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <SystemClock_Config+0xb8>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <SystemClock_Config+0xb8>)
 8000cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <SystemClock_Config+0xb8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce8:	f107 0320 	add.w	r3, r7, #32
 8000cec:	4618      	mov	r0, r3
 8000cee:	f002 f98f 	bl	8003010 <HAL_RCC_OscConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000cf8:	f000 fa9c 	bl	8001234 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f002 fbf2 	bl	8003500 <HAL_RCC_ClockConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000d22:	f000 fa87 	bl	8001234 <Error_Handler>
  }
}
 8000d26:	bf00      	nop
 8000d28:	3750      	adds	r7, #80	; 0x50
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40007000 	.word	0x40007000

08000d38 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d3e:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <MX_CAN1_Init+0x9c>)
 8000d40:	4a25      	ldr	r2, [pc, #148]	; (8000dd8 <MX_CAN1_Init+0xa0>)
 8000d42:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8000d44:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <MX_CAN1_Init+0x9c>)
 8000d46:	2208      	movs	r2, #8
 8000d48:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d4a:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <MX_CAN1_Init+0x9c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d50:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <MX_CAN1_Init+0x9c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000d56:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <MX_CAN1_Init+0x9c>)
 8000d58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d5c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <MX_CAN1_Init+0x9c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <MX_CAN1_Init+0x9c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_CAN1_Init+0x9c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_CAN1_Init+0x9c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <MX_CAN1_Init+0x9c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_CAN1_Init+0x9c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_CAN1_Init+0x9c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d88:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <MX_CAN1_Init+0x9c>)
 8000d8a:	f000 ffc7 	bl	8001d1c <HAL_CAN_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000d94:	f000 fa4e 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig1;

  canfilterconfig1.FilterActivation = CAN_FILTER_ENABLE;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	623b      	str	r3, [r7, #32]
  canfilterconfig1.FilterBank = 0;  // which filter bank to use from the assigned ones
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
  canfilterconfig1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	613b      	str	r3, [r7, #16]
  canfilterconfig1.FilterIdHigh = 0x0A2<<5;
 8000da4:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8000da8:	603b      	str	r3, [r7, #0]
  canfilterconfig1.FilterIdLow = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
  canfilterconfig1.FilterMaskIdHigh = 0x0A2;
 8000dae:	23a2      	movs	r3, #162	; 0xa2
 8000db0:	60bb      	str	r3, [r7, #8]
  canfilterconfig1.FilterMaskIdLow = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
  canfilterconfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
  canfilterconfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	61fb      	str	r3, [r7, #28]
  canfilterconfig1.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 8000dbe:	230e      	movs	r3, #14
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig1);
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <MX_CAN1_Init+0x9c>)
 8000dc8:	f001 f8a4 	bl	8001f14 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	3728      	adds	r7, #40	; 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200001e4 	.word	0x200001e4
 8000dd8:	40006400 	.word	0x40006400

08000ddc <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <MX_CAN2_Init+0xa0>)
 8000de4:	4a26      	ldr	r2, [pc, #152]	; (8000e80 <MX_CAN2_Init+0xa4>)
 8000de6:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 8;
 8000de8:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <MX_CAN2_Init+0xa0>)
 8000dea:	2208      	movs	r2, #8
 8000dec:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000dee:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <MX_CAN2_Init+0xa0>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000df4:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <MX_CAN2_Init+0xa0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000dfa:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <MX_CAN2_Init+0xa0>)
 8000dfc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e00:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <MX_CAN2_Init+0xa0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000e08:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <MX_CAN2_Init+0xa0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <MX_CAN2_Init+0xa0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000e14:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_CAN2_Init+0xa0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <MX_CAN2_Init+0xa0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <MX_CAN2_Init+0xa0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <MX_CAN2_Init+0xa0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000e2c:	4813      	ldr	r0, [pc, #76]	; (8000e7c <MX_CAN2_Init+0xa0>)
 8000e2e:	f000 ff75 	bl	8001d1c <HAL_CAN_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000e38:	f000 f9fc 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN_FilterTypeDef canfilterconfig2;

    canfilterconfig2.FilterActivation = CAN_FILTER_ENABLE;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	623b      	str	r3, [r7, #32]
    canfilterconfig2.FilterBank = 14;  // which filter bank to use from the assigned ones
 8000e40:	230e      	movs	r3, #14
 8000e42:	617b      	str	r3, [r7, #20]
    canfilterconfig2.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
    canfilterconfig2.FilterIdHigh = 0x012<<5;
 8000e48:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e4c:	603b      	str	r3, [r7, #0]
    canfilterconfig2.FilterIdLow = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
    canfilterconfig2.FilterMaskIdHigh = 0x0A12;
 8000e52:	f640 2312 	movw	r3, #2578	; 0xa12
 8000e56:	60bb      	str	r3, [r7, #8]
    canfilterconfig2.FilterMaskIdLow = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
    canfilterconfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61bb      	str	r3, [r7, #24]
    canfilterconfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61fb      	str	r3, [r7, #28]
    canfilterconfig2.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 8000e64:	230e      	movs	r3, #14
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig2);
 8000e68:	463b      	mov	r3, r7
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4803      	ldr	r0, [pc, #12]	; (8000e7c <MX_CAN2_Init+0xa0>)
 8000e6e:	f001 f851 	bl	8001f14 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN2_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	; 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2000010c 	.word	0x2000010c
 8000e80:	40006800 	.word	0x40006800

08000e84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000e8a:	4a18      	ldr	r2, [pc, #96]	; (8000eec <MX_SPI1_Init+0x68>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000eb8:	2208      	movs	r2, #8
 8000eba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000ed0:	220a      	movs	r2, #10
 8000ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000ed6:	f002 fcaf 	bl	8003838 <HAL_SPI_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ee0:	f000 f9a8 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000013c 	.word	0x2000013c
 8000eec:	40013000 	.word	0x40013000

08000ef0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f04:	463b      	mov	r3, r7
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <MX_TIM2_Init+0x94>)
 8000f0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <MX_TIM2_Init+0x94>)
 8000f16:	220f      	movs	r2, #15
 8000f18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <MX_TIM2_Init+0x94>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000f20:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <MX_TIM2_Init+0x94>)
 8000f22:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_TIM2_Init+0x94>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <MX_TIM2_Init+0x94>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f34:	4813      	ldr	r0, [pc, #76]	; (8000f84 <MX_TIM2_Init+0x94>)
 8000f36:	f003 fa35 	bl	80043a4 <HAL_TIM_Base_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f40:	f000 f978 	bl	8001234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <MX_TIM2_Init+0x94>)
 8000f52:	f003 fbef 	bl	8004734 <HAL_TIM_ConfigClockSource>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f5c:	f000 f96a 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f60:	2300      	movs	r3, #0
 8000f62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f68:	463b      	mov	r3, r7
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_TIM2_Init+0x94>)
 8000f6e:	f003 fe0b 	bl	8004b88 <HAL_TIMEx_MasterConfigSynchronization>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f78:	f000 f95c 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	2000019c 	.word	0x2000019c

08000f88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <MX_GPIO_Init+0xd0>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a2c      	ldr	r2, [pc, #176]	; (8001058 <MX_GPIO_Init+0xd0>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <MX_GPIO_Init+0xd0>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	4b26      	ldr	r3, [pc, #152]	; (8001058 <MX_GPIO_Init+0xd0>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a25      	ldr	r2, [pc, #148]	; (8001058 <MX_GPIO_Init+0xd0>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b23      	ldr	r3, [pc, #140]	; (8001058 <MX_GPIO_Init+0xd0>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <MX_GPIO_Init+0xd0>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <MX_GPIO_Init+0xd0>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <MX_GPIO_Init+0xd0>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_8
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f240 3185 	movw	r1, #901	; 0x385
 8000ff8:	4818      	ldr	r0, [pc, #96]	; (800105c <MX_GPIO_Init+0xd4>)
 8000ffa:	f001 ffd5 	bl	8002fa8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : JOYSTICK_CTR_Pin JOYSTICK_A_Pin JOYSTICK_B_Pin JOYSTICK_C_Pin
                           JOYSTICK_D_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_CTR_Pin|JOYSTICK_A_Pin|JOYSTICK_B_Pin|JOYSTICK_C_Pin
 8000ffe:	f242 03f0 	movw	r3, #8432	; 0x20f0
 8001002:	60fb      	str	r3, [r7, #12]
                          |JOYSTICK_D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001008:	2301      	movs	r3, #1
 800100a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	4619      	mov	r1, r3
 8001012:	4813      	ldr	r0, [pc, #76]	; (8001060 <MX_GPIO_Init+0xd8>)
 8001014:	f001 fe2c 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_8
 8001018:	f240 3385 	movw	r3, #901	; 0x385
 800101c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	4619      	mov	r1, r3
 8001030:	480a      	ldr	r0, [pc, #40]	; (800105c <MX_GPIO_Init+0xd4>)
 8001032:	f001 fe1d 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001036:	2310      	movs	r3, #16
 8001038:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800103e:	2301      	movs	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	4619      	mov	r1, r3
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <MX_GPIO_Init+0xd4>)
 800104a:	f001 fe11 	bl	8002c70 <HAL_GPIO_Init>

}
 800104e:	bf00      	nop
 8001050:	3720      	adds	r7, #32
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40020400 	.word	0x40020400
 8001060:	40020800 	.word	0x40020800

08001064 <calc_SAE_J1850>:

/* USER CODE BEGIN 4 */

int calc_SAE_J1850(uint8_t data[], int length){
 8001064:	b480      	push	{r7}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
	uint8_t polynomial = 0x1D; // Generator polynomial for CRC-8 SAE J1850
 800106e:	231d      	movs	r3, #29
 8001070:	72fb      	strb	r3, [r7, #11]
	uint8_t remainder = 0xFF;
 8001072:	23ff      	movs	r3, #255	; 0xff
 8001074:	75fb      	strb	r3, [r7, #23]

	for (int i = 0; i < length; i++) {
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	e022      	b.n	80010c2 <calc_SAE_J1850+0x5e>
		remainder ^= data[i];
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	781a      	ldrb	r2, [r3, #0]
 8001084:	7dfb      	ldrb	r3, [r7, #23]
 8001086:	4053      	eors	r3, r2
 8001088:	75fb      	strb	r3, [r7, #23]
		for (int bit = 0; bit < 8; bit++) {
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	e012      	b.n	80010b6 <calc_SAE_J1850+0x52>
			if (remainder & 0x80) {
 8001090:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001094:	2b00      	cmp	r3, #0
 8001096:	da08      	bge.n	80010aa <calc_SAE_J1850+0x46>
				remainder = (remainder << 1) ^ polynomial;
 8001098:	7dfb      	ldrb	r3, [r7, #23]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	b25a      	sxtb	r2, r3
 800109e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80010a2:	4053      	eors	r3, r2
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	75fb      	strb	r3, [r7, #23]
 80010a8:	e002      	b.n	80010b0 <calc_SAE_J1850+0x4c>
			} else {
				remainder <<= 1;
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	75fb      	strb	r3, [r7, #23]
		for (int bit = 0; bit < 8; bit++) {
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	3301      	adds	r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2b07      	cmp	r3, #7
 80010ba:	dde9      	ble.n	8001090 <calc_SAE_J1850+0x2c>
	for (int i = 0; i < length; i++) {
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	3301      	adds	r3, #1
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	dbd8      	blt.n	800107c <calc_SAE_J1850+0x18>
			}
		}
	}

	return remainder ^ 0xFF; // Invert the bits
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	b2db      	uxtb	r3, r3
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	371c      	adds	r7, #28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <setTimer0>:

void setTimer0(int time_ms){
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	timer0_counter = time_ms/10;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a08      	ldr	r2, [pc, #32]	; (8001108 <setTimer0+0x2c>)
 80010e8:	fb82 1203 	smull	r1, r2, r2, r3
 80010ec:	1092      	asrs	r2, r2, #2
 80010ee:	17db      	asrs	r3, r3, #31
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	4a06      	ldr	r2, [pc, #24]	; (800110c <setTimer0+0x30>)
 80010f4:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <setTimer0+0x34>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	66666667 	.word	0x66666667
 800110c:	200000b0 	.word	0x200000b0
 8001110:	200000ac 	.word	0x200000ac

08001114 <setTimer1>:

void setTimer1(int time_ms){
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	timer1_counter = time_ms/10;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a08      	ldr	r2, [pc, #32]	; (8001140 <setTimer1+0x2c>)
 8001120:	fb82 1203 	smull	r1, r2, r2, r3
 8001124:	1092      	asrs	r2, r2, #2
 8001126:	17db      	asrs	r3, r3, #31
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	4a06      	ldr	r2, [pc, #24]	; (8001144 <setTimer1+0x30>)
 800112c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <setTimer1+0x34>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	66666667 	.word	0x66666667
 8001144:	200000b8 	.word	0x200000b8
 8001148:	200000b4 	.word	0x200000b4

0800114c <timerRun>:

void timerRun(){
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <timerRun+0x44>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	dd05      	ble.n	8001164 <timerRun+0x18>
		timer0_counter--;
 8001158:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <timerRun+0x44>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	3b01      	subs	r3, #1
 800115e:	4a0c      	ldr	r2, [pc, #48]	; (8001190 <timerRun+0x44>)
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e002      	b.n	800116a <timerRun+0x1e>
	}else{
		timer0_flag = 1;
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <timerRun+0x48>)
 8001166:	2201      	movs	r2, #1
 8001168:	601a      	str	r2, [r3, #0]
	}
	if(timer1_counter > 0){
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <timerRun+0x4c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	dd05      	ble.n	800117e <timerRun+0x32>
		timer1_counter--;
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <timerRun+0x4c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	3b01      	subs	r3, #1
 8001178:	4a07      	ldr	r2, [pc, #28]	; (8001198 <timerRun+0x4c>)
 800117a:	6013      	str	r3, [r2, #0]
	}else{
		timer1_flag = 1;
	}
}
 800117c:	e002      	b.n	8001184 <timerRun+0x38>
		timer1_flag = 1;
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <timerRun+0x50>)
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	200000b0 	.word	0x200000b0
 8001194:	200000ac 	.word	0x200000ac
 8001198:	200000b8 	.word	0x200000b8
 800119c:	200000b4 	.word	0x200000b4

080011a0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1){
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a14      	ldr	r2, [pc, #80]	; (8001200 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d10e      	bne.n	80011d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
		if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData)==HAL_OK){
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80011b4:	4a14      	ldr	r2, [pc, #80]	; (8001208 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80011b6:	2100      	movs	r1, #0
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f001 f8df 	bl	800237c <HAL_CAN_GetRxMessage>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d103      	bne.n	80011cc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
			dataflag = 1;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	e001      	b.n	80011d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
		}else{
			Error_Handler();
 80011cc:	f000 f832 	bl	8001234 <Error_Handler>
		}
	}
	if(hcan->Instance == CAN2){
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d10e      	bne.n	80011f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
		if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader2, RxData2)==HAL_OK){
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80011dc:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80011de:	2100      	movs	r1, #0
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f001 f8cb 	bl	800237c <HAL_CAN_GetRxMessage>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d103      	bne.n	80011f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
			dataflag2 = 1;
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	601a      	str	r2, [r3, #0]
		}else{
			Error_Handler();
		}
	}
}
 80011f2:	e001      	b.n	80011f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
			Error_Handler();
 80011f4:	f000 f81e 	bl	8001234 <Error_Handler>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40006400 	.word	0x40006400
 8001204:	20000194 	.word	0x20000194
 8001208:	20000224 	.word	0x20000224
 800120c:	200000a4 	.word	0x200000a4
 8001210:	40006800 	.word	0x40006800
 8001214:	200000e8 	.word	0x200000e8
 8001218:	200000f0 	.word	0x200000f0
 800121c:	200000a8 	.word	0x200000a8

08001220 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	timerRun();
 8001228:	f7ff ff90 	bl	800114c <timerRun>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
}
 800123a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800123c:	e7fe      	b.n	800123c <Error_Handler+0x8>
	...

08001240 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800124a:	2200      	movs	r2, #0
 800124c:	2180      	movs	r1, #128	; 0x80
 800124e:	480c      	ldr	r0, [pc, #48]	; (8001280 <ST7789_WriteCommand+0x40>)
 8001250:	f001 feaa 	bl	8002fa8 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8001254:	2200      	movs	r2, #0
 8001256:	f44f 7180 	mov.w	r1, #256	; 0x100
 800125a:	4809      	ldr	r0, [pc, #36]	; (8001280 <ST7789_WriteCommand+0x40>)
 800125c:	f001 fea4 	bl	8002fa8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001260:	1df9      	adds	r1, r7, #7
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	2201      	movs	r2, #1
 8001268:	4806      	ldr	r0, [pc, #24]	; (8001284 <ST7789_WriteCommand+0x44>)
 800126a:	f002 fb6e 	bl	800394a <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800126e:	2201      	movs	r2, #1
 8001270:	2180      	movs	r1, #128	; 0x80
 8001272:	4803      	ldr	r0, [pc, #12]	; (8001280 <ST7789_WriteCommand+0x40>)
 8001274:	f001 fe98 	bl	8002fa8 <HAL_GPIO_WritePin>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40020400 	.word	0x40020400
 8001284:	2000013c 	.word	0x2000013c

08001288 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8001292:	2200      	movs	r2, #0
 8001294:	2180      	movs	r1, #128	; 0x80
 8001296:	4816      	ldr	r0, [pc, #88]	; (80012f0 <ST7789_WriteData+0x68>)
 8001298:	f001 fe86 	bl	8002fa8 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800129c:	2201      	movs	r2, #1
 800129e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a2:	4813      	ldr	r0, [pc, #76]	; (80012f0 <ST7789_WriteData+0x68>)
 80012a4:	f001 fe80 	bl	8002fa8 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80012a8:	e015      	b.n	80012d6 <ST7789_WriteData+0x4e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012b0:	4293      	cmp	r3, r2
 80012b2:	bf28      	it	cs
 80012b4:	4613      	movcs	r3, r2
 80012b6:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80012b8:	89fa      	ldrh	r2, [r7, #14]
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	480c      	ldr	r0, [pc, #48]	; (80012f4 <ST7789_WriteData+0x6c>)
 80012c2:	f002 fb42 	bl	800394a <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 80012c6:	89fb      	ldrh	r3, [r7, #14]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	4413      	add	r3, r2
 80012cc:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80012ce:	89fb      	ldrh	r3, [r7, #14]
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1e6      	bne.n	80012aa <ST7789_WriteData+0x22>
	}

	ST7789_UnSelect();
 80012dc:	2201      	movs	r2, #1
 80012de:	2180      	movs	r1, #128	; 0x80
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <ST7789_WriteData+0x68>)
 80012e2:	f001 fe61 	bl	8002fa8 <HAL_GPIO_WritePin>
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40020400 	.word	0x40020400
 80012f4:	2000013c 	.word	0x2000013c

080012f8 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001302:	2200      	movs	r2, #0
 8001304:	2180      	movs	r1, #128	; 0x80
 8001306:	480c      	ldr	r0, [pc, #48]	; (8001338 <ST7789_WriteSmallData+0x40>)
 8001308:	f001 fe4e 	bl	8002fa8 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800130c:	2201      	movs	r2, #1
 800130e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001312:	4809      	ldr	r0, [pc, #36]	; (8001338 <ST7789_WriteSmallData+0x40>)
 8001314:	f001 fe48 	bl	8002fa8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8001318:	1df9      	adds	r1, r7, #7
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	2201      	movs	r2, #1
 8001320:	4806      	ldr	r0, [pc, #24]	; (800133c <ST7789_WriteSmallData+0x44>)
 8001322:	f002 fb12 	bl	800394a <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001326:	2201      	movs	r2, #1
 8001328:	2180      	movs	r1, #128	; 0x80
 800132a:	4803      	ldr	r0, [pc, #12]	; (8001338 <ST7789_WriteSmallData+0x40>)
 800132c:	f001 fe3c 	bl	8002fa8 <HAL_GPIO_WritePin>
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40020400 	.word	0x40020400
 800133c:	2000013c 	.word	0x2000013c

08001340 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800134a:	2036      	movs	r0, #54	; 0x36
 800134c:	f7ff ff78 	bl	8001240 <ST7789_WriteCommand>
	switch (m) {
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	2b03      	cmp	r3, #3
 8001354:	d81a      	bhi.n	800138c <ST7789_SetRotation+0x4c>
 8001356:	a201      	add	r2, pc, #4	; (adr r2, 800135c <ST7789_SetRotation+0x1c>)
 8001358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135c:	0800136d 	.word	0x0800136d
 8001360:	08001375 	.word	0x08001375
 8001364:	0800137d 	.word	0x0800137d
 8001368:	08001385 	.word	0x08001385
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 800136c:	20c0      	movs	r0, #192	; 0xc0
 800136e:	f7ff ffc3 	bl	80012f8 <ST7789_WriteSmallData>
		break;
 8001372:	e00c      	b.n	800138e <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001374:	20a0      	movs	r0, #160	; 0xa0
 8001376:	f7ff ffbf 	bl	80012f8 <ST7789_WriteSmallData>
		break;
 800137a:	e008      	b.n	800138e <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 800137c:	2000      	movs	r0, #0
 800137e:	f7ff ffbb 	bl	80012f8 <ST7789_WriteSmallData>
		break;
 8001382:	e004      	b.n	800138e <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001384:	2060      	movs	r0, #96	; 0x60
 8001386:	f7ff ffb7 	bl	80012f8 <ST7789_WriteSmallData>
		break;
 800138a:	e000      	b.n	800138e <ST7789_SetRotation+0x4e>
	default:
		break;
 800138c:	bf00      	nop
	}
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop

08001398 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
 800139e:	4604      	mov	r4, r0
 80013a0:	4608      	mov	r0, r1
 80013a2:	4611      	mov	r1, r2
 80013a4:	461a      	mov	r2, r3
 80013a6:	4623      	mov	r3, r4
 80013a8:	80fb      	strh	r3, [r7, #6]
 80013aa:	4603      	mov	r3, r0
 80013ac:	80bb      	strh	r3, [r7, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	807b      	strh	r3, [r7, #2]
 80013b2:	4613      	mov	r3, r2
 80013b4:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80013b6:	2200      	movs	r2, #0
 80013b8:	2180      	movs	r1, #128	; 0x80
 80013ba:	4824      	ldr	r0, [pc, #144]	; (800144c <ST7789_SetAddressWindow+0xb4>)
 80013bc:	f001 fdf4 	bl	8002fa8 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	82fb      	strh	r3, [r7, #22]
 80013c4:	887b      	ldrh	r3, [r7, #2]
 80013c6:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80013c8:	88bb      	ldrh	r3, [r7, #4]
 80013ca:	827b      	strh	r3, [r7, #18]
 80013cc:	883b      	ldrh	r3, [r7, #0]
 80013ce:	823b      	strh	r3, [r7, #16]

	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET);
 80013d0:	202a      	movs	r0, #42	; 0x2a
 80013d2:	f7ff ff35 	bl	8001240 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80013d6:	8afb      	ldrh	r3, [r7, #22]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	b29b      	uxth	r3, r3
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	733b      	strb	r3, [r7, #12]
 80013e0:	8afb      	ldrh	r3, [r7, #22]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	737b      	strb	r3, [r7, #13]
 80013e6:	8abb      	ldrh	r3, [r7, #20]
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	73bb      	strb	r3, [r7, #14]
 80013f0:	8abb      	ldrh	r3, [r7, #20]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	2104      	movs	r1, #4
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff43 	bl	8001288 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8001402:	202b      	movs	r0, #43	; 0x2b
 8001404:	f7ff ff1c 	bl	8001240 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8001408:	8a7b      	ldrh	r3, [r7, #18]
 800140a:	0a1b      	lsrs	r3, r3, #8
 800140c:	b29b      	uxth	r3, r3
 800140e:	b2db      	uxtb	r3, r3
 8001410:	723b      	strb	r3, [r7, #8]
 8001412:	8a7b      	ldrh	r3, [r7, #18]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	727b      	strb	r3, [r7, #9]
 8001418:	8a3b      	ldrh	r3, [r7, #16]
 800141a:	0a1b      	lsrs	r3, r3, #8
 800141c:	b29b      	uxth	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	72bb      	strb	r3, [r7, #10]
 8001422:	8a3b      	ldrh	r3, [r7, #16]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	2104      	movs	r1, #4
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ff2a 	bl	8001288 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001434:	202c      	movs	r0, #44	; 0x2c
 8001436:	f7ff ff03 	bl	8001240 <ST7789_WriteCommand>
	ST7789_UnSelect();
 800143a:	2201      	movs	r2, #1
 800143c:	2180      	movs	r1, #128	; 0x80
 800143e:	4803      	ldr	r0, [pc, #12]	; (800144c <ST7789_SetAddressWindow+0xb4>)
 8001440:	f001 fdb2 	bl	8002fa8 <HAL_GPIO_WritePin>
}
 8001444:	bf00      	nop
 8001446:	371c      	adds	r7, #28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd90      	pop	{r4, r7, pc}
 800144c:	40020400 	.word	0x40020400

08001450 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b08b      	sub	sp, #44	; 0x2c
 8001454:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 8001456:	2019      	movs	r0, #25
 8001458:	f000 fc3c 	bl	8001cd4 <HAL_Delay>
    ST7789_RST_Clr();
 800145c:	2200      	movs	r2, #0
 800145e:	2104      	movs	r1, #4
 8001460:	4846      	ldr	r0, [pc, #280]	; (800157c <ST7789_Init+0x12c>)
 8001462:	f001 fda1 	bl	8002fa8 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8001466:	2019      	movs	r0, #25
 8001468:	f000 fc34 	bl	8001cd4 <HAL_Delay>
    ST7789_RST_Set();
 800146c:	2201      	movs	r2, #1
 800146e:	2104      	movs	r1, #4
 8001470:	4842      	ldr	r0, [pc, #264]	; (800157c <ST7789_Init+0x12c>)
 8001472:	f001 fd99 	bl	8002fa8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001476:	2032      	movs	r0, #50	; 0x32
 8001478:	f000 fc2c 	bl	8001cd4 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 800147c:	203a      	movs	r0, #58	; 0x3a
 800147e:	f7ff fedf 	bl	8001240 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8001482:	2055      	movs	r0, #85	; 0x55
 8001484:	f7ff ff38 	bl	80012f8 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8001488:	20b2      	movs	r0, #178	; 0xb2
 800148a:	f7ff fed9 	bl	8001240 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 800148e:	4a3c      	ldr	r2, [pc, #240]	; (8001580 <ST7789_Init+0x130>)
 8001490:	f107 0320 	add.w	r3, r7, #32
 8001494:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001498:	6018      	str	r0, [r3, #0]
 800149a:	3304      	adds	r3, #4
 800149c:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 800149e:	f107 0320 	add.w	r3, r7, #32
 80014a2:	2105      	movs	r1, #5
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff feef 	bl	8001288 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80014aa:	2001      	movs	r0, #1
 80014ac:	f7ff ff48 	bl	8001340 <ST7789_SetRotation>

	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80014b0:	20b7      	movs	r0, #183	; 0xb7
 80014b2:	f7ff fec5 	bl	8001240 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80014b6:	2035      	movs	r0, #53	; 0x35
 80014b8:	f7ff ff1e 	bl	80012f8 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80014bc:	20bb      	movs	r0, #187	; 0xbb
 80014be:	f7ff febf 	bl	8001240 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80014c2:	2019      	movs	r0, #25
 80014c4:	f7ff ff18 	bl	80012f8 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL
 80014c8:	20c0      	movs	r0, #192	; 0xc0
 80014ca:	f7ff feb9 	bl	8001240 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 80014ce:	202c      	movs	r0, #44	; 0x2c
 80014d0:	f7ff ff12 	bl	80012f8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80014d4:	20c2      	movs	r0, #194	; 0xc2
 80014d6:	f7ff feb3 	bl	8001240 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80014da:	2001      	movs	r0, #1
 80014dc:	f7ff ff0c 	bl	80012f8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80014e0:	20c3      	movs	r0, #195	; 0xc3
 80014e2:	f7ff fead 	bl	8001240 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80014e6:	2012      	movs	r0, #18
 80014e8:	f7ff ff06 	bl	80012f8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 80014ec:	20c4      	movs	r0, #196	; 0xc4
 80014ee:	f7ff fea7 	bl	8001240 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 80014f2:	2020      	movs	r0, #32
 80014f4:	f7ff ff00 	bl	80012f8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 80014f8:	20c6      	movs	r0, #198	; 0xc6
 80014fa:	f7ff fea1 	bl	8001240 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 80014fe:	200f      	movs	r0, #15
 8001500:	f7ff fefa 	bl	80012f8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8001504:	20d0      	movs	r0, #208	; 0xd0
 8001506:	f7ff fe9b 	bl	8001240 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 800150a:	20a4      	movs	r0, #164	; 0xa4
 800150c:	f7ff fef4 	bl	80012f8 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8001510:	20a1      	movs	r0, #161	; 0xa1
 8001512:	f7ff fef1 	bl	80012f8 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8001516:	20e0      	movs	r0, #224	; 0xe0
 8001518:	f7ff fe92 	bl	8001240 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <ST7789_Init+0x134>)
 800151e:	f107 0410 	add.w	r4, r7, #16
 8001522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001524:	c407      	stmia	r4!, {r0, r1, r2}
 8001526:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001528:	f107 0310 	add.w	r3, r7, #16
 800152c:	210e      	movs	r1, #14
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff feaa 	bl	8001288 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8001534:	20e1      	movs	r0, #225	; 0xe1
 8001536:	f7ff fe83 	bl	8001240 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <ST7789_Init+0x138>)
 800153c:	463c      	mov	r4, r7
 800153e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001540:	c407      	stmia	r4!, {r0, r1, r2}
 8001542:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001544:	463b      	mov	r3, r7
 8001546:	210e      	movs	r1, #14
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fe9d 	bl	8001288 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 800154e:	2021      	movs	r0, #33	; 0x21
 8001550:	f7ff fe76 	bl	8001240 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8001554:	2011      	movs	r0, #17
 8001556:	f7ff fe73 	bl	8001240 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800155a:	2013      	movs	r0, #19
 800155c:	f7ff fe70 	bl	8001240 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on
 8001560:	2029      	movs	r0, #41	; 0x29
 8001562:	f7ff fe6d 	bl	8001240 <ST7789_WriteCommand>

	HAL_Delay(50);
 8001566:	2032      	movs	r0, #50	; 0x32
 8001568:	f000 fbb4 	bl	8001cd4 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 800156c:	2000      	movs	r0, #0
 800156e:	f000 f80d 	bl	800158c <ST7789_Fill_Color>
}
 8001572:	bf00      	nop
 8001574:	372c      	adds	r7, #44	; 0x2c
 8001576:	46bd      	mov	sp, r7
 8001578:	bd90      	pop	{r4, r7, pc}
 800157a:	bf00      	nop
 800157c:	40020400 	.word	0x40020400
 8001580:	08005604 	.word	0x08005604
 8001584:	0800560c 	.word	0x0800560c
 8001588:	0800561c 	.word	0x0800561c

0800158c <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8001596:	23ef      	movs	r3, #239	; 0xef
 8001598:	f240 123f 	movw	r2, #319	; 0x13f
 800159c:	2100      	movs	r1, #0
 800159e:	2000      	movs	r0, #0
 80015a0:	f7ff fefa 	bl	8001398 <ST7789_SetAddressWindow>
	ST7789_Select();
 80015a4:	2200      	movs	r2, #0
 80015a6:	2180      	movs	r1, #128	; 0x80
 80015a8:	4816      	ldr	r0, [pc, #88]	; (8001604 <ST7789_Fill_Color+0x78>)
 80015aa:	f001 fcfd 	bl	8002fa8 <HAL_GPIO_WritePin>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	81fb      	strh	r3, [r7, #14]
 80015b2:	e019      	b.n	80015e8 <ST7789_Fill_Color+0x5c>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80015b4:	2300      	movs	r3, #0
 80015b6:	81bb      	strh	r3, [r7, #12]
 80015b8:	e010      	b.n	80015dc <ST7789_Fill_Color+0x50>
					uint8_t data[] = {color >> 8, color & 0xFF};
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	b29b      	uxth	r3, r3
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	723b      	strb	r3, [r7, #8]
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	2102      	movs	r1, #2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fe59 	bl	8001288 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80015d6:	89bb      	ldrh	r3, [r7, #12]
 80015d8:	3301      	adds	r3, #1
 80015da:	81bb      	strh	r3, [r7, #12]
 80015dc:	89bb      	ldrh	r3, [r7, #12]
 80015de:	2bef      	cmp	r3, #239	; 0xef
 80015e0:	d9eb      	bls.n	80015ba <ST7789_Fill_Color+0x2e>
		for (i = 0; i < ST7789_WIDTH; i++)
 80015e2:	89fb      	ldrh	r3, [r7, #14]
 80015e4:	3301      	adds	r3, #1
 80015e6:	81fb      	strh	r3, [r7, #14]
 80015e8:	89fb      	ldrh	r3, [r7, #14]
 80015ea:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80015ee:	d3e1      	bcc.n	80015b4 <ST7789_Fill_Color+0x28>
				}
	#endif
	ST7789_UnSelect();
 80015f0:	2201      	movs	r2, #1
 80015f2:	2180      	movs	r1, #128	; 0x80
 80015f4:	4803      	ldr	r0, [pc, #12]	; (8001604 <ST7789_Fill_Color+0x78>)
 80015f6:	f001 fcd7 	bl	8002fa8 <HAL_GPIO_WritePin>
}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40020400 	.word	0x40020400

08001608 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001608:	b082      	sub	sp, #8
 800160a:	b590      	push	{r4, r7, lr}
 800160c:	b089      	sub	sp, #36	; 0x24
 800160e:	af00      	add	r7, sp, #0
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
 8001612:	4603      	mov	r3, r0
 8001614:	80fb      	strh	r3, [r7, #6]
 8001616:	460b      	mov	r3, r1
 8001618:	80bb      	strh	r3, [r7, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 800161e:	2200      	movs	r2, #0
 8001620:	2180      	movs	r1, #128	; 0x80
 8001622:	4838      	ldr	r0, [pc, #224]	; (8001704 <ST7789_WriteChar+0xfc>)
 8001624:	f001 fcc0 	bl	8002fa8 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8001628:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800162c:	b29a      	uxth	r2, r3
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	4413      	add	r3, r2
 8001632:	b29b      	uxth	r3, r3
 8001634:	3b01      	subs	r3, #1
 8001636:	b29c      	uxth	r4, r3
 8001638:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800163c:	b29a      	uxth	r2, r3
 800163e:	88bb      	ldrh	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	b29b      	uxth	r3, r3
 8001644:	3b01      	subs	r3, #1
 8001646:	b29b      	uxth	r3, r3
 8001648:	88b9      	ldrh	r1, [r7, #4]
 800164a:	88f8      	ldrh	r0, [r7, #6]
 800164c:	4622      	mov	r2, r4
 800164e:	f7ff fea3 	bl	8001398 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	e043      	b.n	80016e0 <ST7789_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 8001658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	3b20      	subs	r3, #32
 800165e:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001662:	fb01 f303 	mul.w	r3, r1, r3
 8001666:	4619      	mov	r1, r3
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	440b      	add	r3, r1
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8001674:	2300      	movs	r3, #0
 8001676:	61bb      	str	r3, [r7, #24]
 8001678:	e029      	b.n	80016ce <ST7789_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00e      	beq.n	80016a8 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 800168a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	b29b      	uxth	r3, r3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	743b      	strb	r3, [r7, #16]
 8001694:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001696:	b2db      	uxtb	r3, r3
 8001698:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 800169a:	f107 0310 	add.w	r3, r7, #16
 800169e:	2102      	movs	r1, #2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fdf1 	bl	8001288 <ST7789_WriteData>
 80016a6:	e00f      	b.n	80016c8 <ST7789_WriteChar+0xc0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 80016a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	733b      	strb	r3, [r7, #12]
 80016b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	2102      	movs	r1, #2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fde0 	bl	8001288 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	3301      	adds	r3, #1
 80016cc:	61bb      	str	r3, [r7, #24]
 80016ce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80016d2:	461a      	mov	r2, r3
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d3cf      	bcc.n	800167a <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3301      	adds	r3, #1
 80016de:	61fb      	str	r3, [r7, #28]
 80016e0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80016e4:	461a      	mov	r2, r3
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d3b5      	bcc.n	8001658 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 80016ec:	2201      	movs	r2, #1
 80016ee:	2180      	movs	r1, #128	; 0x80
 80016f0:	4804      	ldr	r0, [pc, #16]	; (8001704 <ST7789_WriteChar+0xfc>)
 80016f2:	f001 fc59 	bl	8002fa8 <HAL_GPIO_WritePin>
}
 80016f6:	bf00      	nop
 80016f8:	3724      	adds	r7, #36	; 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001700:	b002      	add	sp, #8
 8001702:	4770      	bx	lr
 8001704:	40020400 	.word	0x40020400

08001708 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001708:	b082      	sub	sp, #8
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af04      	add	r7, sp, #16
 8001710:	603a      	str	r2, [r7, #0]
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	4603      	mov	r3, r0
 8001716:	80fb      	strh	r3, [r7, #6]
 8001718:	460b      	mov	r3, r1
 800171a:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 800171c:	2200      	movs	r2, #0
 800171e:	2180      	movs	r1, #128	; 0x80
 8001720:	4822      	ldr	r0, [pc, #136]	; (80017ac <ST7789_WriteString+0xa4>)
 8001722:	f001 fc41 	bl	8002fa8 <HAL_GPIO_WritePin>
	while (*str) {
 8001726:	e02e      	b.n	8001786 <ST7789_WriteString+0x7e>
		if (x + font.width >= ST7789_WIDTH) {
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	7d3a      	ldrb	r2, [r7, #20]
 800172c:	4413      	add	r3, r2
 800172e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001732:	db13      	blt.n	800175c <ST7789_WriteString+0x54>
			x = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8001738:	7d7b      	ldrb	r3, [r7, #21]
 800173a:	b29a      	uxth	r2, r3
 800173c:	88bb      	ldrh	r3, [r7, #4]
 800173e:	4413      	add	r3, r2
 8001740:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8001742:	88bb      	ldrh	r3, [r7, #4]
 8001744:	7d7a      	ldrb	r2, [r7, #21]
 8001746:	4413      	add	r3, r2
 8001748:	2bef      	cmp	r3, #239	; 0xef
 800174a:	dc21      	bgt.n	8001790 <ST7789_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b20      	cmp	r3, #32
 8001752:	d103      	bne.n	800175c <ST7789_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	603b      	str	r3, [r7, #0]
				continue;
 800175a:	e014      	b.n	8001786 <ST7789_WriteString+0x7e>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	781a      	ldrb	r2, [r3, #0]
 8001760:	88b9      	ldrh	r1, [r7, #4]
 8001762:	88f8      	ldrh	r0, [r7, #6]
 8001764:	8c3b      	ldrh	r3, [r7, #32]
 8001766:	9302      	str	r3, [sp, #8]
 8001768:	8bbb      	ldrh	r3, [r7, #28]
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f7ff ff49 	bl	8001608 <ST7789_WriteChar>
		x += font.width;
 8001776:	7d3b      	ldrb	r3, [r7, #20]
 8001778:	b29a      	uxth	r2, r3
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	4413      	add	r3, r2
 800177e:	80fb      	strh	r3, [r7, #6]
		str++;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1cc      	bne.n	8001728 <ST7789_WriteString+0x20>
 800178e:	e000      	b.n	8001792 <ST7789_WriteString+0x8a>
				break;
 8001790:	bf00      	nop
	}
	ST7789_UnSelect();
 8001792:	2201      	movs	r2, #1
 8001794:	2180      	movs	r1, #128	; 0x80
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <ST7789_WriteString+0xa4>)
 8001798:	f001 fc06 	bl	8002fa8 <HAL_GPIO_WritePin>
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017a6:	b002      	add	sp, #8
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40020400 	.word	0x40020400

080017b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <HAL_MspInit+0x4c>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	4a0f      	ldr	r2, [pc, #60]	; (80017fc <HAL_MspInit+0x4c>)
 80017c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c4:	6453      	str	r3, [r2, #68]	; 0x44
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <HAL_MspInit+0x4c>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	603b      	str	r3, [r7, #0]
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_MspInit+0x4c>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	4a08      	ldr	r2, [pc, #32]	; (80017fc <HAL_MspInit+0x4c>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e0:	6413      	str	r3, [r2, #64]	; 0x40
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_MspInit+0x4c>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800

08001800 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08c      	sub	sp, #48	; 0x30
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 031c 	add.w	r3, r7, #28
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a4a      	ldr	r2, [pc, #296]	; (8001948 <HAL_CAN_MspInit+0x148>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d13e      	bne.n	80018a0 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001822:	4b4a      	ldr	r3, [pc, #296]	; (800194c <HAL_CAN_MspInit+0x14c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	3301      	adds	r3, #1
 8001828:	4a48      	ldr	r2, [pc, #288]	; (800194c <HAL_CAN_MspInit+0x14c>)
 800182a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800182c:	4b47      	ldr	r3, [pc, #284]	; (800194c <HAL_CAN_MspInit+0x14c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d10d      	bne.n	8001850 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001834:	2300      	movs	r3, #0
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	4b45      	ldr	r3, [pc, #276]	; (8001950 <HAL_CAN_MspInit+0x150>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	4a44      	ldr	r2, [pc, #272]	; (8001950 <HAL_CAN_MspInit+0x150>)
 800183e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001842:	6413      	str	r3, [r2, #64]	; 0x40
 8001844:	4b42      	ldr	r3, [pc, #264]	; (8001950 <HAL_CAN_MspInit+0x150>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	4b3e      	ldr	r3, [pc, #248]	; (8001950 <HAL_CAN_MspInit+0x150>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	4a3d      	ldr	r2, [pc, #244]	; (8001950 <HAL_CAN_MspInit+0x150>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6313      	str	r3, [r2, #48]	; 0x30
 8001860:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <HAL_CAN_MspInit+0x150>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800186c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001876:	2301      	movs	r3, #1
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187a:	2303      	movs	r3, #3
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800187e:	2309      	movs	r3, #9
 8001880:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	4619      	mov	r1, r3
 8001888:	4832      	ldr	r0, [pc, #200]	; (8001954 <HAL_CAN_MspInit+0x154>)
 800188a:	f001 f9f1 	bl	8002c70 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	2014      	movs	r0, #20
 8001894:	f001 f9b5 	bl	8002c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001898:	2014      	movs	r0, #20
 800189a:	f001 f9ce 	bl	8002c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800189e:	e04f      	b.n	8001940 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a2c      	ldr	r2, [pc, #176]	; (8001958 <HAL_CAN_MspInit+0x158>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d14a      	bne.n	8001940 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b28      	ldr	r3, [pc, #160]	; (8001950 <HAL_CAN_MspInit+0x150>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a27      	ldr	r2, [pc, #156]	; (8001950 <HAL_CAN_MspInit+0x150>)
 80018b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ba:	4b25      	ldr	r3, [pc, #148]	; (8001950 <HAL_CAN_MspInit+0x150>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80018c6:	4b21      	ldr	r3, [pc, #132]	; (800194c <HAL_CAN_MspInit+0x14c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	3301      	adds	r3, #1
 80018cc:	4a1f      	ldr	r2, [pc, #124]	; (800194c <HAL_CAN_MspInit+0x14c>)
 80018ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80018d0:	4b1e      	ldr	r3, [pc, #120]	; (800194c <HAL_CAN_MspInit+0x14c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d10d      	bne.n	80018f4 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <HAL_CAN_MspInit+0x150>)
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	4a1b      	ldr	r2, [pc, #108]	; (8001950 <HAL_CAN_MspInit+0x150>)
 80018e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018e6:	6413      	str	r3, [r2, #64]	; 0x40
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_CAN_MspInit+0x150>)
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f4:	2300      	movs	r3, #0
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_CAN_MspInit+0x150>)
 80018fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fc:	4a14      	ldr	r2, [pc, #80]	; (8001950 <HAL_CAN_MspInit+0x150>)
 80018fe:	f043 0302 	orr.w	r3, r3, #2
 8001902:	6313      	str	r3, [r2, #48]	; 0x30
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_CAN_MspInit+0x150>)
 8001906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001910:	2360      	movs	r3, #96	; 0x60
 8001912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001918:	2301      	movs	r3, #1
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001920:	2309      	movs	r3, #9
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	4619      	mov	r1, r3
 800192a:	480c      	ldr	r0, [pc, #48]	; (800195c <HAL_CAN_MspInit+0x15c>)
 800192c:	f001 f9a0 	bl	8002c70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001930:	2200      	movs	r2, #0
 8001932:	2100      	movs	r1, #0
 8001934:	2040      	movs	r0, #64	; 0x40
 8001936:	f001 f964 	bl	8002c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800193a:	2040      	movs	r0, #64	; 0x40
 800193c:	f001 f97d 	bl	8002c3a <HAL_NVIC_EnableIRQ>
}
 8001940:	bf00      	nop
 8001942:	3730      	adds	r7, #48	; 0x30
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40006400 	.word	0x40006400
 800194c:	200000c0 	.word	0x200000c0
 8001950:	40023800 	.word	0x40023800
 8001954:	40020000 	.word	0x40020000
 8001958:	40006800 	.word	0x40006800
 800195c:	40020400 	.word	0x40020400

08001960 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a28      	ldr	r2, [pc, #160]	; (8001a20 <HAL_SPI_MspInit+0xc0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d149      	bne.n	8001a16 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <HAL_SPI_MspInit+0xc4>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	4a26      	ldr	r2, [pc, #152]	; (8001a24 <HAL_SPI_MspInit+0xc4>)
 800198c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001990:	6453      	str	r3, [r2, #68]	; 0x44
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_SPI_MspInit+0xc4>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <HAL_SPI_MspInit+0xc4>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a1f      	ldr	r2, [pc, #124]	; (8001a24 <HAL_SPI_MspInit+0xc4>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <HAL_SPI_MspInit+0xc4>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_SPI_MspInit+0xc4>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a18      	ldr	r2, [pc, #96]	; (8001a24 <HAL_SPI_MspInit+0xc4>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <HAL_SPI_MspInit+0xc4>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019d6:	23c0      	movs	r3, #192	; 0xc0
 80019d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	2302      	movs	r3, #2
 80019dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019de:	2301      	movs	r3, #1
 80019e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e2:	2303      	movs	r3, #3
 80019e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019e6:	2305      	movs	r3, #5
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4619      	mov	r1, r3
 80019f0:	480d      	ldr	r0, [pc, #52]	; (8001a28 <HAL_SPI_MspInit+0xc8>)
 80019f2:	f001 f93d 	bl	8002c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019f6:	2308      	movs	r3, #8
 80019f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a02:	2303      	movs	r3, #3
 8001a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a06:	2305      	movs	r3, #5
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4806      	ldr	r0, [pc, #24]	; (8001a2c <HAL_SPI_MspInit+0xcc>)
 8001a12:	f001 f92d 	bl	8002c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a16:	bf00      	nop
 8001a18:	3728      	adds	r7, #40	; 0x28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40013000 	.word	0x40013000
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	40020400 	.word	0x40020400

08001a30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a40:	d115      	bne.n	8001a6e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <HAL_TIM_Base_MspInit+0x48>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	4a0b      	ldr	r2, [pc, #44]	; (8001a78 <HAL_TIM_Base_MspInit+0x48>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6413      	str	r3, [r2, #64]	; 0x40
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <HAL_TIM_Base_MspInit+0x48>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2100      	movs	r1, #0
 8001a62:	201c      	movs	r0, #28
 8001a64:	f001 f8cd 	bl	8002c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a68:	201c      	movs	r0, #28
 8001a6a:	f001 f8e6 	bl	8002c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800

08001a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <NMI_Handler+0x4>

08001a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <HardFault_Handler+0x4>

08001a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <MemManage_Handler+0x4>

08001a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <BusFault_Handler+0x4>

08001a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <UsageFault_Handler+0x4>

08001a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac8:	f000 f8e4 	bl	8001c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <CAN1_RX0_IRQHandler+0x10>)
 8001ad6:	f000 fd89 	bl	80025ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200001e4 	.word	0x200001e4

08001ae4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <TIM2_IRQHandler+0x10>)
 8001aea:	f002 fd1b 	bl	8004524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2000019c 	.word	0x2000019c

08001af8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <CAN2_RX0_IRQHandler+0x10>)
 8001afe:	f000 fd75 	bl	80025ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000010c 	.word	0x2000010c

08001b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b14:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <_sbrk+0x5c>)
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <_sbrk+0x60>)
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b20:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d102      	bne.n	8001b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <_sbrk+0x64>)
 8001b2a:	4a12      	ldr	r2, [pc, #72]	; (8001b74 <_sbrk+0x68>)
 8001b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d207      	bcs.n	8001b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b3c:	f003 f8b4 	bl	8004ca8 <__errno>
 8001b40:	4603      	mov	r3, r0
 8001b42:	220c      	movs	r2, #12
 8001b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4a:	e009      	b.n	8001b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <_sbrk+0x64>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <_sbrk+0x64>)
 8001b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20020000 	.word	0x20020000
 8001b6c:	00000400 	.word	0x00000400
 8001b70:	200000c4 	.word	0x200000c4
 8001b74:	20000258 	.word	0x20000258

08001b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <SystemInit+0x20>)
 8001b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b82:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <SystemInit+0x20>)
 8001b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ba0:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ba2:	490e      	ldr	r1, [pc, #56]	; (8001bdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ba4:	4a0e      	ldr	r2, [pc, #56]	; (8001be0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba8:	e002      	b.n	8001bb0 <LoopCopyDataInit>

08001baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bae:	3304      	adds	r3, #4

08001bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb4:	d3f9      	bcc.n	8001baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb6:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bb8:	4c0b      	ldr	r4, [pc, #44]	; (8001be8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bbc:	e001      	b.n	8001bc2 <LoopFillZerobss>

08001bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc0:	3204      	adds	r2, #4

08001bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc4:	d3fb      	bcc.n	8001bbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bc6:	f7ff ffd7 	bl	8001b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bca:	f003 f873 	bl	8004cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bce:	f7fe fedf 	bl	8000990 <main>
  bx  lr    
 8001bd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bdc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001be0:	08005e5c 	.word	0x08005e5c
  ldr r2, =_sbss
 8001be4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001be8:	20000254 	.word	0x20000254

08001bec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bec:	e7fe      	b.n	8001bec <ADC_IRQHandler>
	...

08001bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bf4:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <HAL_Init+0x40>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	; (8001c30 <HAL_Init+0x40>)
 8001bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_Init+0x40>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <HAL_Init+0x40>)
 8001c06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <HAL_Init+0x40>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a07      	ldr	r2, [pc, #28]	; (8001c30 <HAL_Init+0x40>)
 8001c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f000 ffe7 	bl	8002bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c1e:	200f      	movs	r0, #15
 8001c20:	f000 f808 	bl	8001c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c24:	f7ff fdc4 	bl	80017b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023c00 	.word	0x40023c00

08001c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_InitTick+0x54>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_InitTick+0x58>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	4619      	mov	r1, r3
 8001c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 ffff 	bl	8002c56 <HAL_SYSTICK_Config>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00e      	b.n	8001c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b0f      	cmp	r3, #15
 8001c66:	d80a      	bhi.n	8001c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	f000 ffc7 	bl	8002c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c74:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <HAL_InitTick+0x5c>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e000      	b.n	8001c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	20000010 	.word	0x20000010
 8001c90:	2000000c 	.word	0x2000000c

08001c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_IncTick+0x20>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_IncTick+0x24>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <HAL_IncTick+0x24>)
 8001ca6:	6013      	str	r3, [r2, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20000010 	.word	0x20000010
 8001cb8:	20000240 	.word	0x20000240

08001cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_GetTick+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000240 	.word	0x20000240

08001cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cdc:	f7ff ffee 	bl	8001cbc <HAL_GetTick>
 8001ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cec:	d005      	beq.n	8001cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_Delay+0x44>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cfa:	bf00      	nop
 8001cfc:	f7ff ffde 	bl	8001cbc <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d8f7      	bhi.n	8001cfc <HAL_Delay+0x28>
  {
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000010 	.word	0x20000010

08001d1c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0ed      	b.n	8001f0a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d102      	bne.n	8001d40 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff fd60 	bl	8001800 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d50:	f7ff ffb4 	bl	8001cbc <HAL_GetTick>
 8001d54:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d56:	e012      	b.n	8001d7e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d58:	f7ff ffb0 	bl	8001cbc <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b0a      	cmp	r3, #10
 8001d64:	d90b      	bls.n	8001d7e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2205      	movs	r2, #5
 8001d76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e0c5      	b.n	8001f0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0e5      	beq.n	8001d58 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0202 	bic.w	r2, r2, #2
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d9c:	f7ff ff8e 	bl	8001cbc <HAL_GetTick>
 8001da0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001da2:	e012      	b.n	8001dca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001da4:	f7ff ff8a 	bl	8001cbc <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b0a      	cmp	r3, #10
 8001db0:	d90b      	bls.n	8001dca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2205      	movs	r2, #5
 8001dc2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e09f      	b.n	8001f0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1e5      	bne.n	8001da4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7e1b      	ldrb	r3, [r3, #24]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d108      	bne.n	8001df2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	e007      	b.n	8001e02 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7e5b      	ldrb	r3, [r3, #25]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d108      	bne.n	8001e1c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	e007      	b.n	8001e2c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7e9b      	ldrb	r3, [r3, #26]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d108      	bne.n	8001e46 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0220 	orr.w	r2, r2, #32
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	e007      	b.n	8001e56 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0220 	bic.w	r2, r2, #32
 8001e54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7edb      	ldrb	r3, [r3, #27]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d108      	bne.n	8001e70 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0210 	bic.w	r2, r2, #16
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	e007      	b.n	8001e80 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0210 	orr.w	r2, r2, #16
 8001e7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7f1b      	ldrb	r3, [r3, #28]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d108      	bne.n	8001e9a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0208 	orr.w	r2, r2, #8
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	e007      	b.n	8001eaa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0208 	bic.w	r2, r2, #8
 8001ea8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7f5b      	ldrb	r3, [r3, #29]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d108      	bne.n	8001ec4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f042 0204 	orr.w	r2, r2, #4
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	e007      	b.n	8001ed4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0204 	bic.w	r2, r2, #4
 8001ed2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	ea42 0103 	orr.w	r1, r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	1e5a      	subs	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f2a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f2c:	7cfb      	ldrb	r3, [r7, #19]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d003      	beq.n	8001f3a <HAL_CAN_ConfigFilter+0x26>
 8001f32:	7cfb      	ldrb	r3, [r7, #19]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	f040 80be 	bne.w	80020b6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001f3a:	4b65      	ldr	r3, [pc, #404]	; (80020d0 <HAL_CAN_ConfigFilter+0x1bc>)
 8001f3c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f44:	f043 0201 	orr.w	r2, r3, #1
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f54:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	f003 031f 	and.w	r3, r3, #31
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	401a      	ands	r2, r3
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d123      	bne.n	8001fe4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fbe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	3248      	adds	r2, #72	; 0x48
 8001fc4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fd8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fda:	6979      	ldr	r1, [r7, #20]
 8001fdc:	3348      	adds	r3, #72	; 0x48
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	440b      	add	r3, r1
 8001fe2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d122      	bne.n	8002032 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800200c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	3248      	adds	r2, #72	; 0x48
 8002012:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002026:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002028:	6979      	ldr	r1, [r7, #20]
 800202a:	3348      	adds	r3, #72	; 0x48
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	440b      	add	r3, r1
 8002030:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	43db      	mvns	r3, r3
 8002044:	401a      	ands	r2, r3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800204c:	e007      	b.n	800205e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	431a      	orrs	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d109      	bne.n	800207a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	43db      	mvns	r3, r3
 8002070:	401a      	ands	r2, r3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002078:	e007      	b.n	800208a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	431a      	orrs	r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d107      	bne.n	80020a2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	431a      	orrs	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020a8:	f023 0201 	bic.w	r2, r3, #1
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e006      	b.n	80020c4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
  }
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	371c      	adds	r7, #28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	40006400 	.word	0x40006400

080020d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d12e      	bne.n	8002146 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0201 	bic.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002100:	f7ff fddc 	bl	8001cbc <HAL_GetTick>
 8002104:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002106:	e012      	b.n	800212e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002108:	f7ff fdd8 	bl	8001cbc <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b0a      	cmp	r3, #10
 8002114:	d90b      	bls.n	800212e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2205      	movs	r2, #5
 8002126:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e012      	b.n	8002154 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1e5      	bne.n	8002108 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	e006      	b.n	8002154 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
  }
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002170:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800217a:	7ffb      	ldrb	r3, [r7, #31]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d003      	beq.n	8002188 <HAL_CAN_AddTxMessage+0x2c>
 8002180:	7ffb      	ldrb	r3, [r7, #31]
 8002182:	2b02      	cmp	r3, #2
 8002184:	f040 80b8 	bne.w	80022f8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10a      	bne.n	80021a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 80a0 	beq.w	80022e8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	0e1b      	lsrs	r3, r3, #24
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d907      	bls.n	80021c8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e09e      	b.n	8002306 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80021c8:	2201      	movs	r2, #1
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	409a      	lsls	r2, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10d      	bne.n	80021f6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021e4:	68f9      	ldr	r1, [r7, #12]
 80021e6:	6809      	ldr	r1, [r1, #0]
 80021e8:	431a      	orrs	r2, r3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	3318      	adds	r3, #24
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	440b      	add	r3, r1
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	e00f      	b.n	8002216 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002200:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002206:	68f9      	ldr	r1, [r7, #12]
 8002208:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800220a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	3318      	adds	r3, #24
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	440b      	add	r3, r1
 8002214:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6819      	ldr	r1, [r3, #0]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	3318      	adds	r3, #24
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	440b      	add	r3, r1
 8002226:	3304      	adds	r3, #4
 8002228:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	7d1b      	ldrb	r3, [r3, #20]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d111      	bne.n	8002256 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3318      	adds	r3, #24
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	4413      	add	r3, r2
 800223e:	3304      	adds	r3, #4
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	6811      	ldr	r1, [r2, #0]
 8002246:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	3318      	adds	r3, #24
 800224e:	011b      	lsls	r3, r3, #4
 8002250:	440b      	add	r3, r1
 8002252:	3304      	adds	r3, #4
 8002254:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3307      	adds	r3, #7
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	061a      	lsls	r2, r3, #24
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3306      	adds	r3, #6
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	041b      	lsls	r3, r3, #16
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3305      	adds	r3, #5
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	4313      	orrs	r3, r2
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	3204      	adds	r2, #4
 8002276:	7812      	ldrb	r2, [r2, #0]
 8002278:	4610      	mov	r0, r2
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	6811      	ldr	r1, [r2, #0]
 800227e:	ea43 0200 	orr.w	r2, r3, r0
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	440b      	add	r3, r1
 8002288:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800228c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3303      	adds	r3, #3
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	061a      	lsls	r2, r3, #24
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3302      	adds	r3, #2
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	041b      	lsls	r3, r3, #16
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3301      	adds	r3, #1
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	021b      	lsls	r3, r3, #8
 80022a8:	4313      	orrs	r3, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	7812      	ldrb	r2, [r2, #0]
 80022ae:	4610      	mov	r0, r2
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	6811      	ldr	r1, [r2, #0]
 80022b4:	ea43 0200 	orr.w	r2, r3, r0
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	440b      	add	r3, r1
 80022be:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80022c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	3318      	adds	r3, #24
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	4413      	add	r3, r2
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	6811      	ldr	r1, [r2, #0]
 80022d6:	f043 0201 	orr.w	r2, r3, #1
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	3318      	adds	r3, #24
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	440b      	add	r3, r1
 80022e2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80022e4:	2300      	movs	r3, #0
 80022e6:	e00e      	b.n	8002306 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e006      	b.n	8002306 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
  }
}
 8002306:	4618      	mov	r0, r3
 8002308:	3724      	adds	r7, #36	; 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002324:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002326:	7afb      	ldrb	r3, [r7, #11]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d002      	beq.n	8002332 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800232c:	7afb      	ldrb	r3, [r7, #11]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d11d      	bne.n	800236e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	3301      	adds	r3, #1
 8002358:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3301      	adds	r3, #1
 800236c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800236e:	68fb      	ldr	r3, [r7, #12]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002390:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002392:	7dfb      	ldrb	r3, [r7, #23]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d003      	beq.n	80023a0 <HAL_CAN_GetRxMessage+0x24>
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	2b02      	cmp	r3, #2
 800239c:	f040 80f3 	bne.w	8002586 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10e      	bne.n	80023c4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d116      	bne.n	80023e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0e7      	b.n	8002594 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d107      	bne.n	80023e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e0d8      	b.n	8002594 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	331b      	adds	r3, #27
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	4413      	add	r3, r2
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0204 	and.w	r2, r3, #4
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10c      	bne.n	800241a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	331b      	adds	r3, #27
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	4413      	add	r3, r2
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	0d5b      	lsrs	r3, r3, #21
 8002410:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e00b      	b.n	8002432 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	331b      	adds	r3, #27
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	4413      	add	r3, r2
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	08db      	lsrs	r3, r3, #3
 800242a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	331b      	adds	r3, #27
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	4413      	add	r3, r2
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0202 	and.w	r2, r3, #2
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	331b      	adds	r3, #27
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	4413      	add	r3, r2
 8002454:	3304      	adds	r3, #4
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 020f 	and.w	r2, r3, #15
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	331b      	adds	r3, #27
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	4413      	add	r3, r2
 800246c:	3304      	adds	r3, #4
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	b2da      	uxtb	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	331b      	adds	r3, #27
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	4413      	add	r3, r2
 8002484:	3304      	adds	r3, #4
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0c1b      	lsrs	r3, r3, #16
 800248a:	b29a      	uxth	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	4413      	add	r3, r2
 800249a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0a1a      	lsrs	r2, r3, #8
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	3301      	adds	r3, #1
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0c1a      	lsrs	r2, r3, #16
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	3302      	adds	r3, #2
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	0e1a      	lsrs	r2, r3, #24
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	3303      	adds	r3, #3
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	3304      	adds	r3, #4
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	4413      	add	r3, r2
 8002516:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	0a1a      	lsrs	r2, r3, #8
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	3305      	adds	r3, #5
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	4413      	add	r3, r2
 8002530:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	0c1a      	lsrs	r2, r3, #16
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	3306      	adds	r3, #6
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	4413      	add	r3, r2
 800254a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0e1a      	lsrs	r2, r3, #24
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	3307      	adds	r3, #7
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d108      	bne.n	8002572 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0220 	orr.w	r2, r2, #32
 800256e:	60da      	str	r2, [r3, #12]
 8002570:	e007      	b.n	8002582 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 0220 	orr.w	r2, r2, #32
 8002580:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	e006      	b.n	8002594 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
  }
}
 8002594:	4618      	mov	r0, r3
 8002596:	371c      	adds	r7, #28
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d002      	beq.n	80025be <HAL_CAN_ActivateNotification+0x1e>
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d109      	bne.n	80025d2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6959      	ldr	r1, [r3, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e006      	b.n	80025e0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
  }
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08a      	sub	sp, #40	; 0x28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d07c      	beq.n	800272c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d023      	beq.n	8002684 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2201      	movs	r2, #1
 8002642:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f983 	bl	800295a <HAL_CAN_TxMailbox0CompleteCallback>
 8002654:	e016      	b.n	8002684 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d004      	beq.n	800266a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
 8002668:	e00c      	b.n	8002684 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d004      	beq.n	800267e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
 800267c:	e002      	b.n	8002684 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f989 	bl	8002996 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d024      	beq.n	80026d8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002696:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f963 	bl	800296e <HAL_CAN_TxMailbox1CompleteCallback>
 80026a8:	e016      	b.n	80026d8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d004      	beq.n	80026be <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
 80026bc:	e00c      	b.n	80026d8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d004      	beq.n	80026d2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
 80026d0:	e002      	b.n	80026d8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f969 	bl	80029aa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d024      	beq.n	800272c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f943 	bl	8002982 <HAL_CAN_TxMailbox2CompleteCallback>
 80026fc:	e016      	b.n	800272c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d004      	beq.n	8002712 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
 8002710:	e00c      	b.n	800272c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d004      	beq.n	8002726 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
 8002724:	e002      	b.n	800272c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f949 	bl	80029be <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00c      	beq.n	8002750 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002746:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2210      	movs	r2, #16
 800274e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b00      	cmp	r3, #0
 8002762:	d006      	beq.n	8002772 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2208      	movs	r2, #8
 800276a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f930 	bl	80029d2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d009      	beq.n	8002790 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7fe fd08 	bl	80011a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00c      	beq.n	80027b4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d007      	beq.n	80027b4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2210      	movs	r2, #16
 80027b2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	f003 0320 	and.w	r3, r3, #32
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00b      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d006      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2208      	movs	r2, #8
 80027ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f912 	bl	80029fa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	f003 0310 	and.w	r3, r3, #16
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d009      	beq.n	80027f4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f8f9 	bl	80029e6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	2b00      	cmp	r3, #0
 8002806:	d006      	beq.n	8002816 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2210      	movs	r2, #16
 800280e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f8fc 	bl	8002a0e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00b      	beq.n	8002838 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d006      	beq.n	8002838 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2208      	movs	r2, #8
 8002830:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f8f5 	bl	8002a22 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d07b      	beq.n	800293a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d072      	beq.n	8002932 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002852:	2b00      	cmp	r3, #0
 8002854:	d008      	beq.n	8002868 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286e:	2b00      	cmp	r3, #0
 8002870:	d008      	beq.n	8002884 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	f043 0302 	orr.w	r3, r3, #2
 8002882:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288a:	2b00      	cmp	r3, #0
 800288c:	d008      	beq.n	80028a0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	f043 0304 	orr.w	r3, r3, #4
 800289e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d043      	beq.n	8002932 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d03e      	beq.n	8002932 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028ba:	2b60      	cmp	r3, #96	; 0x60
 80028bc:	d02b      	beq.n	8002916 <HAL_CAN_IRQHandler+0x32a>
 80028be:	2b60      	cmp	r3, #96	; 0x60
 80028c0:	d82e      	bhi.n	8002920 <HAL_CAN_IRQHandler+0x334>
 80028c2:	2b50      	cmp	r3, #80	; 0x50
 80028c4:	d022      	beq.n	800290c <HAL_CAN_IRQHandler+0x320>
 80028c6:	2b50      	cmp	r3, #80	; 0x50
 80028c8:	d82a      	bhi.n	8002920 <HAL_CAN_IRQHandler+0x334>
 80028ca:	2b40      	cmp	r3, #64	; 0x40
 80028cc:	d019      	beq.n	8002902 <HAL_CAN_IRQHandler+0x316>
 80028ce:	2b40      	cmp	r3, #64	; 0x40
 80028d0:	d826      	bhi.n	8002920 <HAL_CAN_IRQHandler+0x334>
 80028d2:	2b30      	cmp	r3, #48	; 0x30
 80028d4:	d010      	beq.n	80028f8 <HAL_CAN_IRQHandler+0x30c>
 80028d6:	2b30      	cmp	r3, #48	; 0x30
 80028d8:	d822      	bhi.n	8002920 <HAL_CAN_IRQHandler+0x334>
 80028da:	2b10      	cmp	r3, #16
 80028dc:	d002      	beq.n	80028e4 <HAL_CAN_IRQHandler+0x2f8>
 80028de:	2b20      	cmp	r3, #32
 80028e0:	d005      	beq.n	80028ee <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80028e2:	e01d      	b.n	8002920 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	f043 0308 	orr.w	r3, r3, #8
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028ec:	e019      	b.n	8002922 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	f043 0310 	orr.w	r3, r3, #16
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028f6:	e014      	b.n	8002922 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	f043 0320 	orr.w	r3, r3, #32
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002900:	e00f      	b.n	8002922 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800290a:	e00a      	b.n	8002922 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002914:	e005      	b.n	8002922 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800291e:	e000      	b.n	8002922 <HAL_CAN_IRQHandler+0x336>
            break;
 8002920:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699a      	ldr	r2, [r3, #24]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002930:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2204      	movs	r2, #4
 8002938:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f872 	bl	8002a36 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002952:	bf00      	nop
 8002954:	3728      	adds	r7, #40	; 0x28
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <__NVIC_SetPriorityGrouping+0x44>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a7e:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <__NVIC_SetPriorityGrouping+0x44>)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	60d3      	str	r3, [r2, #12]
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <__NVIC_GetPriorityGrouping+0x18>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	f003 0307 	and.w	r3, r3, #7
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	db0b      	blt.n	8002ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	f003 021f 	and.w	r2, r3, #31
 8002ac8:	4907      	ldr	r1, [pc, #28]	; (8002ae8 <__NVIC_EnableIRQ+0x38>)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	e000e100 	.word	0xe000e100

08002aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	6039      	str	r1, [r7, #0]
 8002af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	db0a      	blt.n	8002b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	490c      	ldr	r1, [pc, #48]	; (8002b38 <__NVIC_SetPriority+0x4c>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	0112      	lsls	r2, r2, #4
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	440b      	add	r3, r1
 8002b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b14:	e00a      	b.n	8002b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	4908      	ldr	r1, [pc, #32]	; (8002b3c <__NVIC_SetPriority+0x50>)
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	3b04      	subs	r3, #4
 8002b24:	0112      	lsls	r2, r2, #4
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	440b      	add	r3, r1
 8002b2a:	761a      	strb	r2, [r3, #24]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000e100 	.word	0xe000e100
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	; 0x24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f1c3 0307 	rsb	r3, r3, #7
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	bf28      	it	cs
 8002b5e:	2304      	movcs	r3, #4
 8002b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3304      	adds	r3, #4
 8002b66:	2b06      	cmp	r3, #6
 8002b68:	d902      	bls.n	8002b70 <NVIC_EncodePriority+0x30>
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3b03      	subs	r3, #3
 8002b6e:	e000      	b.n	8002b72 <NVIC_EncodePriority+0x32>
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	f04f 32ff 	mov.w	r2, #4294967295
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	401a      	ands	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b88:	f04f 31ff 	mov.w	r1, #4294967295
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b92:	43d9      	mvns	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	4313      	orrs	r3, r2
         );
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3724      	adds	r7, #36	; 0x24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bb8:	d301      	bcc.n	8002bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e00f      	b.n	8002bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bbe:	4a0a      	ldr	r2, [pc, #40]	; (8002be8 <SysTick_Config+0x40>)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bc6:	210f      	movs	r1, #15
 8002bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bcc:	f7ff ff8e 	bl	8002aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <SysTick_Config+0x40>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bd6:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <SysTick_Config+0x40>)
 8002bd8:	2207      	movs	r2, #7
 8002bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	e000e010 	.word	0xe000e010

08002bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ff29 	bl	8002a4c <__NVIC_SetPriorityGrouping>
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b086      	sub	sp, #24
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	4603      	mov	r3, r0
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c14:	f7ff ff3e 	bl	8002a94 <__NVIC_GetPriorityGrouping>
 8002c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	6978      	ldr	r0, [r7, #20]
 8002c20:	f7ff ff8e 	bl	8002b40 <NVIC_EncodePriority>
 8002c24:	4602      	mov	r2, r0
 8002c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ff5d 	bl	8002aec <__NVIC_SetPriority>
}
 8002c32:	bf00      	nop
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	4603      	mov	r3, r0
 8002c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ff31 	bl	8002ab0 <__NVIC_EnableIRQ>
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff ffa2 	bl	8002ba8 <SysTick_Config>
 8002c64:	4603      	mov	r3, r0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	; 0x24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
 8002c8a:	e16b      	b.n	8002f64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	f040 815a 	bne.w	8002f5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d005      	beq.n	8002cc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d130      	bne.n	8002d24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	2203      	movs	r2, #3
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 0201 	and.w	r2, r3, #1
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d017      	beq.n	8002d60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d123      	bne.n	8002db4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	08da      	lsrs	r2, r3, #3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3208      	adds	r2, #8
 8002d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	220f      	movs	r2, #15
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	08da      	lsrs	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3208      	adds	r2, #8
 8002dae:	69b9      	ldr	r1, [r7, #24]
 8002db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0203 	and.w	r2, r3, #3
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80b4 	beq.w	8002f5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	4b60      	ldr	r3, [pc, #384]	; (8002f7c <HAL_GPIO_Init+0x30c>)
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	4a5f      	ldr	r2, [pc, #380]	; (8002f7c <HAL_GPIO_Init+0x30c>)
 8002e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e04:	6453      	str	r3, [r2, #68]	; 0x44
 8002e06:	4b5d      	ldr	r3, [pc, #372]	; (8002f7c <HAL_GPIO_Init+0x30c>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e12:	4a5b      	ldr	r2, [pc, #364]	; (8002f80 <HAL_GPIO_Init+0x310>)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	3302      	adds	r3, #2
 8002e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	220f      	movs	r2, #15
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a52      	ldr	r2, [pc, #328]	; (8002f84 <HAL_GPIO_Init+0x314>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d02b      	beq.n	8002e96 <HAL_GPIO_Init+0x226>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a51      	ldr	r2, [pc, #324]	; (8002f88 <HAL_GPIO_Init+0x318>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d025      	beq.n	8002e92 <HAL_GPIO_Init+0x222>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a50      	ldr	r2, [pc, #320]	; (8002f8c <HAL_GPIO_Init+0x31c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d01f      	beq.n	8002e8e <HAL_GPIO_Init+0x21e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a4f      	ldr	r2, [pc, #316]	; (8002f90 <HAL_GPIO_Init+0x320>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d019      	beq.n	8002e8a <HAL_GPIO_Init+0x21a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a4e      	ldr	r2, [pc, #312]	; (8002f94 <HAL_GPIO_Init+0x324>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d013      	beq.n	8002e86 <HAL_GPIO_Init+0x216>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a4d      	ldr	r2, [pc, #308]	; (8002f98 <HAL_GPIO_Init+0x328>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00d      	beq.n	8002e82 <HAL_GPIO_Init+0x212>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a4c      	ldr	r2, [pc, #304]	; (8002f9c <HAL_GPIO_Init+0x32c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d007      	beq.n	8002e7e <HAL_GPIO_Init+0x20e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a4b      	ldr	r2, [pc, #300]	; (8002fa0 <HAL_GPIO_Init+0x330>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d101      	bne.n	8002e7a <HAL_GPIO_Init+0x20a>
 8002e76:	2307      	movs	r3, #7
 8002e78:	e00e      	b.n	8002e98 <HAL_GPIO_Init+0x228>
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	e00c      	b.n	8002e98 <HAL_GPIO_Init+0x228>
 8002e7e:	2306      	movs	r3, #6
 8002e80:	e00a      	b.n	8002e98 <HAL_GPIO_Init+0x228>
 8002e82:	2305      	movs	r3, #5
 8002e84:	e008      	b.n	8002e98 <HAL_GPIO_Init+0x228>
 8002e86:	2304      	movs	r3, #4
 8002e88:	e006      	b.n	8002e98 <HAL_GPIO_Init+0x228>
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e004      	b.n	8002e98 <HAL_GPIO_Init+0x228>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e002      	b.n	8002e98 <HAL_GPIO_Init+0x228>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <HAL_GPIO_Init+0x228>
 8002e96:	2300      	movs	r3, #0
 8002e98:	69fa      	ldr	r2, [r7, #28]
 8002e9a:	f002 0203 	and.w	r2, r2, #3
 8002e9e:	0092      	lsls	r2, r2, #2
 8002ea0:	4093      	lsls	r3, r2
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ea8:	4935      	ldr	r1, [pc, #212]	; (8002f80 <HAL_GPIO_Init+0x310>)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	089b      	lsrs	r3, r3, #2
 8002eae:	3302      	adds	r3, #2
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eb6:	4b3b      	ldr	r3, [pc, #236]	; (8002fa4 <HAL_GPIO_Init+0x334>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eda:	4a32      	ldr	r2, [pc, #200]	; (8002fa4 <HAL_GPIO_Init+0x334>)
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ee0:	4b30      	ldr	r3, [pc, #192]	; (8002fa4 <HAL_GPIO_Init+0x334>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f04:	4a27      	ldr	r2, [pc, #156]	; (8002fa4 <HAL_GPIO_Init+0x334>)
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f0a:	4b26      	ldr	r3, [pc, #152]	; (8002fa4 <HAL_GPIO_Init+0x334>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	43db      	mvns	r3, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4013      	ands	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f2e:	4a1d      	ldr	r2, [pc, #116]	; (8002fa4 <HAL_GPIO_Init+0x334>)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f34:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <HAL_GPIO_Init+0x334>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f58:	4a12      	ldr	r2, [pc, #72]	; (8002fa4 <HAL_GPIO_Init+0x334>)
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	3301      	adds	r3, #1
 8002f62:	61fb      	str	r3, [r7, #28]
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	2b0f      	cmp	r3, #15
 8002f68:	f67f ae90 	bls.w	8002c8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	3724      	adds	r7, #36	; 0x24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	40013800 	.word	0x40013800
 8002f84:	40020000 	.word	0x40020000
 8002f88:	40020400 	.word	0x40020400
 8002f8c:	40020800 	.word	0x40020800
 8002f90:	40020c00 	.word	0x40020c00
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40021400 	.word	0x40021400
 8002f9c:	40021800 	.word	0x40021800
 8002fa0:	40021c00 	.word	0x40021c00
 8002fa4:	40013c00 	.word	0x40013c00

08002fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	807b      	strh	r3, [r7, #2]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fb8:	787b      	ldrb	r3, [r7, #1]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fbe:	887a      	ldrh	r2, [r7, #2]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fc4:	e003      	b.n	8002fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fc6:	887b      	ldrh	r3, [r7, #2]
 8002fc8:	041a      	lsls	r2, r3, #16
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	619a      	str	r2, [r3, #24]
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b085      	sub	sp, #20
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fec:	887a      	ldrh	r2, [r7, #2]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	041a      	lsls	r2, r3, #16
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	43d9      	mvns	r1, r3
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	400b      	ands	r3, r1
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	619a      	str	r2, [r3, #24]
}
 8003002:	bf00      	nop
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
	...

08003010 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e264      	b.n	80034ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d075      	beq.n	800311a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800302e:	4ba3      	ldr	r3, [pc, #652]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 030c 	and.w	r3, r3, #12
 8003036:	2b04      	cmp	r3, #4
 8003038:	d00c      	beq.n	8003054 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800303a:	4ba0      	ldr	r3, [pc, #640]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003042:	2b08      	cmp	r3, #8
 8003044:	d112      	bne.n	800306c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003046:	4b9d      	ldr	r3, [pc, #628]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003052:	d10b      	bne.n	800306c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003054:	4b99      	ldr	r3, [pc, #612]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d05b      	beq.n	8003118 <HAL_RCC_OscConfig+0x108>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d157      	bne.n	8003118 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e23f      	b.n	80034ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003074:	d106      	bne.n	8003084 <HAL_RCC_OscConfig+0x74>
 8003076:	4b91      	ldr	r3, [pc, #580]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a90      	ldr	r2, [pc, #576]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 800307c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	e01d      	b.n	80030c0 <HAL_RCC_OscConfig+0xb0>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800308c:	d10c      	bne.n	80030a8 <HAL_RCC_OscConfig+0x98>
 800308e:	4b8b      	ldr	r3, [pc, #556]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a8a      	ldr	r2, [pc, #552]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 8003094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	4b88      	ldr	r3, [pc, #544]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a87      	ldr	r2, [pc, #540]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	e00b      	b.n	80030c0 <HAL_RCC_OscConfig+0xb0>
 80030a8:	4b84      	ldr	r3, [pc, #528]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a83      	ldr	r2, [pc, #524]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 80030ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	4b81      	ldr	r3, [pc, #516]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a80      	ldr	r2, [pc, #512]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 80030ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d013      	beq.n	80030f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7fe fdf8 	bl	8001cbc <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030d0:	f7fe fdf4 	bl	8001cbc <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	; 0x64
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e204      	b.n	80034ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	4b76      	ldr	r3, [pc, #472]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0xc0>
 80030ee:	e014      	b.n	800311a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fe fde4 	bl	8001cbc <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f8:	f7fe fde0 	bl	8001cbc <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	; 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e1f0      	b.n	80034ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310a:	4b6c      	ldr	r3, [pc, #432]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0xe8>
 8003116:	e000      	b.n	800311a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d063      	beq.n	80031ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003126:	4b65      	ldr	r3, [pc, #404]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00b      	beq.n	800314a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003132:	4b62      	ldr	r3, [pc, #392]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800313a:	2b08      	cmp	r3, #8
 800313c:	d11c      	bne.n	8003178 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313e:	4b5f      	ldr	r3, [pc, #380]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d116      	bne.n	8003178 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314a:	4b5c      	ldr	r3, [pc, #368]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <HAL_RCC_OscConfig+0x152>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d001      	beq.n	8003162 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e1c4      	b.n	80034ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003162:	4b56      	ldr	r3, [pc, #344]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4952      	ldr	r1, [pc, #328]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 8003172:	4313      	orrs	r3, r2
 8003174:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003176:	e03a      	b.n	80031ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d020      	beq.n	80031c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003180:	4b4f      	ldr	r3, [pc, #316]	; (80032c0 <HAL_RCC_OscConfig+0x2b0>)
 8003182:	2201      	movs	r2, #1
 8003184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003186:	f7fe fd99 	bl	8001cbc <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800318e:	f7fe fd95 	bl	8001cbc <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e1a5      	b.n	80034ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a0:	4b46      	ldr	r3, [pc, #280]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ac:	4b43      	ldr	r3, [pc, #268]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4940      	ldr	r1, [pc, #256]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	600b      	str	r3, [r1, #0]
 80031c0:	e015      	b.n	80031ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031c2:	4b3f      	ldr	r3, [pc, #252]	; (80032c0 <HAL_RCC_OscConfig+0x2b0>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fe fd78 	bl	8001cbc <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031d0:	f7fe fd74 	bl	8001cbc <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e184      	b.n	80034ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e2:	4b36      	ldr	r3, [pc, #216]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d030      	beq.n	800325c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d016      	beq.n	8003230 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003202:	4b30      	ldr	r3, [pc, #192]	; (80032c4 <HAL_RCC_OscConfig+0x2b4>)
 8003204:	2201      	movs	r2, #1
 8003206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003208:	f7fe fd58 	bl	8001cbc <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003210:	f7fe fd54 	bl	8001cbc <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e164      	b.n	80034ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003222:	4b26      	ldr	r3, [pc, #152]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 8003224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0x200>
 800322e:	e015      	b.n	800325c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003230:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <HAL_RCC_OscConfig+0x2b4>)
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003236:	f7fe fd41 	bl	8001cbc <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800323e:	f7fe fd3d 	bl	8001cbc <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e14d      	b.n	80034ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003250:	4b1a      	ldr	r3, [pc, #104]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 8003252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1f0      	bne.n	800323e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80a0 	beq.w	80033aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326a:	2300      	movs	r3, #0
 800326c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800326e:	4b13      	ldr	r3, [pc, #76]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10f      	bne.n	800329a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	4a0e      	ldr	r2, [pc, #56]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 8003284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003288:	6413      	str	r3, [r2, #64]	; 0x40
 800328a:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <HAL_RCC_OscConfig+0x2ac>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003296:	2301      	movs	r3, #1
 8003298:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329a:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_RCC_OscConfig+0x2b8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d121      	bne.n	80032ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a6:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <HAL_RCC_OscConfig+0x2b8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a07      	ldr	r2, [pc, #28]	; (80032c8 <HAL_RCC_OscConfig+0x2b8>)
 80032ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b2:	f7fe fd03 	bl	8001cbc <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b8:	e011      	b.n	80032de <HAL_RCC_OscConfig+0x2ce>
 80032ba:	bf00      	nop
 80032bc:	40023800 	.word	0x40023800
 80032c0:	42470000 	.word	0x42470000
 80032c4:	42470e80 	.word	0x42470e80
 80032c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032cc:	f7fe fcf6 	bl	8001cbc <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e106      	b.n	80034ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032de:	4b85      	ldr	r3, [pc, #532]	; (80034f4 <HAL_RCC_OscConfig+0x4e4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d106      	bne.n	8003300 <HAL_RCC_OscConfig+0x2f0>
 80032f2:	4b81      	ldr	r3, [pc, #516]	; (80034f8 <HAL_RCC_OscConfig+0x4e8>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f6:	4a80      	ldr	r2, [pc, #512]	; (80034f8 <HAL_RCC_OscConfig+0x4e8>)
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	6713      	str	r3, [r2, #112]	; 0x70
 80032fe:	e01c      	b.n	800333a <HAL_RCC_OscConfig+0x32a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b05      	cmp	r3, #5
 8003306:	d10c      	bne.n	8003322 <HAL_RCC_OscConfig+0x312>
 8003308:	4b7b      	ldr	r3, [pc, #492]	; (80034f8 <HAL_RCC_OscConfig+0x4e8>)
 800330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330c:	4a7a      	ldr	r2, [pc, #488]	; (80034f8 <HAL_RCC_OscConfig+0x4e8>)
 800330e:	f043 0304 	orr.w	r3, r3, #4
 8003312:	6713      	str	r3, [r2, #112]	; 0x70
 8003314:	4b78      	ldr	r3, [pc, #480]	; (80034f8 <HAL_RCC_OscConfig+0x4e8>)
 8003316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003318:	4a77      	ldr	r2, [pc, #476]	; (80034f8 <HAL_RCC_OscConfig+0x4e8>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	6713      	str	r3, [r2, #112]	; 0x70
 8003320:	e00b      	b.n	800333a <HAL_RCC_OscConfig+0x32a>
 8003322:	4b75      	ldr	r3, [pc, #468]	; (80034f8 <HAL_RCC_OscConfig+0x4e8>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003326:	4a74      	ldr	r2, [pc, #464]	; (80034f8 <HAL_RCC_OscConfig+0x4e8>)
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	6713      	str	r3, [r2, #112]	; 0x70
 800332e:	4b72      	ldr	r3, [pc, #456]	; (80034f8 <HAL_RCC_OscConfig+0x4e8>)
 8003330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003332:	4a71      	ldr	r2, [pc, #452]	; (80034f8 <HAL_RCC_OscConfig+0x4e8>)
 8003334:	f023 0304 	bic.w	r3, r3, #4
 8003338:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d015      	beq.n	800336e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003342:	f7fe fcbb 	bl	8001cbc <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003348:	e00a      	b.n	8003360 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800334a:	f7fe fcb7 	bl	8001cbc <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	f241 3288 	movw	r2, #5000	; 0x1388
 8003358:	4293      	cmp	r3, r2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e0c5      	b.n	80034ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003360:	4b65      	ldr	r3, [pc, #404]	; (80034f8 <HAL_RCC_OscConfig+0x4e8>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0ee      	beq.n	800334a <HAL_RCC_OscConfig+0x33a>
 800336c:	e014      	b.n	8003398 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336e:	f7fe fca5 	bl	8001cbc <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003374:	e00a      	b.n	800338c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003376:	f7fe fca1 	bl	8001cbc <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f241 3288 	movw	r2, #5000	; 0x1388
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e0af      	b.n	80034ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800338c:	4b5a      	ldr	r3, [pc, #360]	; (80034f8 <HAL_RCC_OscConfig+0x4e8>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1ee      	bne.n	8003376 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003398:	7dfb      	ldrb	r3, [r7, #23]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d105      	bne.n	80033aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800339e:	4b56      	ldr	r3, [pc, #344]	; (80034f8 <HAL_RCC_OscConfig+0x4e8>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	4a55      	ldr	r2, [pc, #340]	; (80034f8 <HAL_RCC_OscConfig+0x4e8>)
 80033a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 809b 	beq.w	80034ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033b4:	4b50      	ldr	r3, [pc, #320]	; (80034f8 <HAL_RCC_OscConfig+0x4e8>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 030c 	and.w	r3, r3, #12
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d05c      	beq.n	800347a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d141      	bne.n	800344c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c8:	4b4c      	ldr	r3, [pc, #304]	; (80034fc <HAL_RCC_OscConfig+0x4ec>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ce:	f7fe fc75 	bl	8001cbc <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d6:	f7fe fc71 	bl	8001cbc <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e081      	b.n	80034ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e8:	4b43      	ldr	r3, [pc, #268]	; (80034f8 <HAL_RCC_OscConfig+0x4e8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f0      	bne.n	80033d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69da      	ldr	r2, [r3, #28]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	019b      	lsls	r3, r3, #6
 8003404:	431a      	orrs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340a:	085b      	lsrs	r3, r3, #1
 800340c:	3b01      	subs	r3, #1
 800340e:	041b      	lsls	r3, r3, #16
 8003410:	431a      	orrs	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003416:	061b      	lsls	r3, r3, #24
 8003418:	4937      	ldr	r1, [pc, #220]	; (80034f8 <HAL_RCC_OscConfig+0x4e8>)
 800341a:	4313      	orrs	r3, r2
 800341c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800341e:	4b37      	ldr	r3, [pc, #220]	; (80034fc <HAL_RCC_OscConfig+0x4ec>)
 8003420:	2201      	movs	r2, #1
 8003422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7fe fc4a 	bl	8001cbc <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342c:	f7fe fc46 	bl	8001cbc <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e056      	b.n	80034ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343e:	4b2e      	ldr	r3, [pc, #184]	; (80034f8 <HAL_RCC_OscConfig+0x4e8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0x41c>
 800344a:	e04e      	b.n	80034ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344c:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <HAL_RCC_OscConfig+0x4ec>)
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003452:	f7fe fc33 	bl	8001cbc <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345a:	f7fe fc2f 	bl	8001cbc <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e03f      	b.n	80034ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346c:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <HAL_RCC_OscConfig+0x4e8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1f0      	bne.n	800345a <HAL_RCC_OscConfig+0x44a>
 8003478:	e037      	b.n	80034ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e032      	b.n	80034ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003486:	4b1c      	ldr	r3, [pc, #112]	; (80034f8 <HAL_RCC_OscConfig+0x4e8>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d028      	beq.n	80034e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800349e:	429a      	cmp	r2, r3
 80034a0:	d121      	bne.n	80034e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d11a      	bne.n	80034e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034b6:	4013      	ands	r3, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034be:	4293      	cmp	r3, r2
 80034c0:	d111      	bne.n	80034e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	085b      	lsrs	r3, r3, #1
 80034ce:	3b01      	subs	r3, #1
 80034d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d107      	bne.n	80034e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d001      	beq.n	80034ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40007000 	.word	0x40007000
 80034f8:	40023800 	.word	0x40023800
 80034fc:	42470060 	.word	0x42470060

08003500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0cc      	b.n	80036ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003514:	4b68      	ldr	r3, [pc, #416]	; (80036b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d90c      	bls.n	800353c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	4b65      	ldr	r3, [pc, #404]	; (80036b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800352a:	4b63      	ldr	r3, [pc, #396]	; (80036b8 <HAL_RCC_ClockConfig+0x1b8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d001      	beq.n	800353c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e0b8      	b.n	80036ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d020      	beq.n	800358a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003554:	4b59      	ldr	r3, [pc, #356]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	4a58      	ldr	r2, [pc, #352]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800355e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800356c:	4b53      	ldr	r3, [pc, #332]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4a52      	ldr	r2, [pc, #328]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003576:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003578:	4b50      	ldr	r3, [pc, #320]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	494d      	ldr	r1, [pc, #308]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d044      	beq.n	8003620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d107      	bne.n	80035ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359e:	4b47      	ldr	r3, [pc, #284]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d119      	bne.n	80035de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e07f      	b.n	80036ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d003      	beq.n	80035be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035be:	4b3f      	ldr	r3, [pc, #252]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e06f      	b.n	80036ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ce:	4b3b      	ldr	r3, [pc, #236]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e067      	b.n	80036ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035de:	4b37      	ldr	r3, [pc, #220]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f023 0203 	bic.w	r2, r3, #3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4934      	ldr	r1, [pc, #208]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f0:	f7fe fb64 	bl	8001cbc <HAL_GetTick>
 80035f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f6:	e00a      	b.n	800360e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f8:	f7fe fb60 	bl	8001cbc <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e04f      	b.n	80036ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	4b2b      	ldr	r3, [pc, #172]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 020c 	and.w	r2, r3, #12
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	429a      	cmp	r2, r3
 800361e:	d1eb      	bne.n	80035f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003620:	4b25      	ldr	r3, [pc, #148]	; (80036b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d20c      	bcs.n	8003648 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362e:	4b22      	ldr	r3, [pc, #136]	; (80036b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003636:	4b20      	ldr	r3, [pc, #128]	; (80036b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d001      	beq.n	8003648 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e032      	b.n	80036ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d008      	beq.n	8003666 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003654:	4b19      	ldr	r3, [pc, #100]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	4916      	ldr	r1, [pc, #88]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	4313      	orrs	r3, r2
 8003664:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d009      	beq.n	8003686 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003672:	4b12      	ldr	r3, [pc, #72]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	490e      	ldr	r1, [pc, #56]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	4313      	orrs	r3, r2
 8003684:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003686:	f000 f821 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 800368a:	4602      	mov	r2, r0
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	091b      	lsrs	r3, r3, #4
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	490a      	ldr	r1, [pc, #40]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003698:	5ccb      	ldrb	r3, [r1, r3]
 800369a:	fa22 f303 	lsr.w	r3, r2, r3
 800369e:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80036a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036a2:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fe fac4 	bl	8001c34 <HAL_InitTick>

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40023c00 	.word	0x40023c00
 80036bc:	40023800 	.word	0x40023800
 80036c0:	08005e08 	.word	0x08005e08
 80036c4:	20000008 	.word	0x20000008
 80036c8:	2000000c 	.word	0x2000000c

080036cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036cc:	b5b0      	push	{r4, r5, r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036d2:	2100      	movs	r1, #0
 80036d4:	6079      	str	r1, [r7, #4]
 80036d6:	2100      	movs	r1, #0
 80036d8:	60f9      	str	r1, [r7, #12]
 80036da:	2100      	movs	r1, #0
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036de:	2100      	movs	r1, #0
 80036e0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036e2:	4952      	ldr	r1, [pc, #328]	; (800382c <HAL_RCC_GetSysClockFreq+0x160>)
 80036e4:	6889      	ldr	r1, [r1, #8]
 80036e6:	f001 010c 	and.w	r1, r1, #12
 80036ea:	2908      	cmp	r1, #8
 80036ec:	d00d      	beq.n	800370a <HAL_RCC_GetSysClockFreq+0x3e>
 80036ee:	2908      	cmp	r1, #8
 80036f0:	f200 8094 	bhi.w	800381c <HAL_RCC_GetSysClockFreq+0x150>
 80036f4:	2900      	cmp	r1, #0
 80036f6:	d002      	beq.n	80036fe <HAL_RCC_GetSysClockFreq+0x32>
 80036f8:	2904      	cmp	r1, #4
 80036fa:	d003      	beq.n	8003704 <HAL_RCC_GetSysClockFreq+0x38>
 80036fc:	e08e      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036fe:	4b4c      	ldr	r3, [pc, #304]	; (8003830 <HAL_RCC_GetSysClockFreq+0x164>)
 8003700:	60bb      	str	r3, [r7, #8]
       break;
 8003702:	e08e      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003704:	4b4b      	ldr	r3, [pc, #300]	; (8003834 <HAL_RCC_GetSysClockFreq+0x168>)
 8003706:	60bb      	str	r3, [r7, #8]
      break;
 8003708:	e08b      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800370a:	4948      	ldr	r1, [pc, #288]	; (800382c <HAL_RCC_GetSysClockFreq+0x160>)
 800370c:	6849      	ldr	r1, [r1, #4]
 800370e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003712:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003714:	4945      	ldr	r1, [pc, #276]	; (800382c <HAL_RCC_GetSysClockFreq+0x160>)
 8003716:	6849      	ldr	r1, [r1, #4]
 8003718:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800371c:	2900      	cmp	r1, #0
 800371e:	d024      	beq.n	800376a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003720:	4942      	ldr	r1, [pc, #264]	; (800382c <HAL_RCC_GetSysClockFreq+0x160>)
 8003722:	6849      	ldr	r1, [r1, #4]
 8003724:	0989      	lsrs	r1, r1, #6
 8003726:	4608      	mov	r0, r1
 8003728:	f04f 0100 	mov.w	r1, #0
 800372c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003730:	f04f 0500 	mov.w	r5, #0
 8003734:	ea00 0204 	and.w	r2, r0, r4
 8003738:	ea01 0305 	and.w	r3, r1, r5
 800373c:	493d      	ldr	r1, [pc, #244]	; (8003834 <HAL_RCC_GetSysClockFreq+0x168>)
 800373e:	fb01 f003 	mul.w	r0, r1, r3
 8003742:	2100      	movs	r1, #0
 8003744:	fb01 f102 	mul.w	r1, r1, r2
 8003748:	1844      	adds	r4, r0, r1
 800374a:	493a      	ldr	r1, [pc, #232]	; (8003834 <HAL_RCC_GetSysClockFreq+0x168>)
 800374c:	fba2 0101 	umull	r0, r1, r2, r1
 8003750:	1863      	adds	r3, r4, r1
 8003752:	4619      	mov	r1, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	461a      	mov	r2, r3
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	f7fc fd88 	bl	8000270 <__aeabi_uldivmod>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4613      	mov	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	e04a      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376a:	4b30      	ldr	r3, [pc, #192]	; (800382c <HAL_RCC_GetSysClockFreq+0x160>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	099b      	lsrs	r3, r3, #6
 8003770:	461a      	mov	r2, r3
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	f240 10ff 	movw	r0, #511	; 0x1ff
 800377a:	f04f 0100 	mov.w	r1, #0
 800377e:	ea02 0400 	and.w	r4, r2, r0
 8003782:	ea03 0501 	and.w	r5, r3, r1
 8003786:	4620      	mov	r0, r4
 8003788:	4629      	mov	r1, r5
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	014b      	lsls	r3, r1, #5
 8003794:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003798:	0142      	lsls	r2, r0, #5
 800379a:	4610      	mov	r0, r2
 800379c:	4619      	mov	r1, r3
 800379e:	1b00      	subs	r0, r0, r4
 80037a0:	eb61 0105 	sbc.w	r1, r1, r5
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	018b      	lsls	r3, r1, #6
 80037ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037b2:	0182      	lsls	r2, r0, #6
 80037b4:	1a12      	subs	r2, r2, r0
 80037b6:	eb63 0301 	sbc.w	r3, r3, r1
 80037ba:	f04f 0000 	mov.w	r0, #0
 80037be:	f04f 0100 	mov.w	r1, #0
 80037c2:	00d9      	lsls	r1, r3, #3
 80037c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037c8:	00d0      	lsls	r0, r2, #3
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	1912      	adds	r2, r2, r4
 80037d0:	eb45 0303 	adc.w	r3, r5, r3
 80037d4:	f04f 0000 	mov.w	r0, #0
 80037d8:	f04f 0100 	mov.w	r1, #0
 80037dc:	0299      	lsls	r1, r3, #10
 80037de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80037e2:	0290      	lsls	r0, r2, #10
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4610      	mov	r0, r2
 80037ea:	4619      	mov	r1, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	f7fc fd3c 	bl	8000270 <__aeabi_uldivmod>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4613      	mov	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003800:	4b0a      	ldr	r3, [pc, #40]	; (800382c <HAL_RCC_GetSysClockFreq+0x160>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	3301      	adds	r3, #1
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	60bb      	str	r3, [r7, #8]
      break;
 800381a:	e002      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800381c:	4b04      	ldr	r3, [pc, #16]	; (8003830 <HAL_RCC_GetSysClockFreq+0x164>)
 800381e:	60bb      	str	r3, [r7, #8]
      break;
 8003820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003822:	68bb      	ldr	r3, [r7, #8]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bdb0      	pop	{r4, r5, r7, pc}
 800382c:	40023800 	.word	0x40023800
 8003830:	00f42400 	.word	0x00f42400
 8003834:	017d7840 	.word	0x017d7840

08003838 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e07b      	b.n	8003942 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	2b00      	cmp	r3, #0
 8003850:	d108      	bne.n	8003864 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800385a:	d009      	beq.n	8003870 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	61da      	str	r2, [r3, #28]
 8003862:	e005      	b.n	8003870 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fe f868 	bl	8001960 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f4:	ea42 0103 	orr.w	r1, r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	0c1b      	lsrs	r3, r3, #16
 800390e:	f003 0104 	and.w	r1, r3, #4
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	f003 0210 	and.w	r2, r3, #16
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	69da      	ldr	r2, [r3, #28]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003930:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b088      	sub	sp, #32
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	603b      	str	r3, [r7, #0]
 8003956:	4613      	mov	r3, r2
 8003958:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_SPI_Transmit+0x22>
 8003968:	2302      	movs	r3, #2
 800396a:	e126      	b.n	8003bba <HAL_SPI_Transmit+0x270>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003974:	f7fe f9a2 	bl	8001cbc <HAL_GetTick>
 8003978:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b01      	cmp	r3, #1
 8003988:	d002      	beq.n	8003990 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800398a:	2302      	movs	r3, #2
 800398c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800398e:	e10b      	b.n	8003ba8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_SPI_Transmit+0x52>
 8003996:	88fb      	ldrh	r3, [r7, #6]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d102      	bne.n	80039a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039a0:	e102      	b.n	8003ba8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2203      	movs	r2, #3
 80039a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	88fa      	ldrh	r2, [r7, #6]
 80039ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	88fa      	ldrh	r2, [r7, #6]
 80039c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039e8:	d10f      	bne.n	8003a0a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a14:	2b40      	cmp	r3, #64	; 0x40
 8003a16:	d007      	beq.n	8003a28 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a30:	d14b      	bne.n	8003aca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_SPI_Transmit+0xf6>
 8003a3a:	8afb      	ldrh	r3, [r7, #22]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d13e      	bne.n	8003abe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a44:	881a      	ldrh	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a50:	1c9a      	adds	r2, r3, #2
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a64:	e02b      	b.n	8003abe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d112      	bne.n	8003a9a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	881a      	ldrh	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	1c9a      	adds	r2, r3, #2
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a98:	e011      	b.n	8003abe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a9a:	f7fe f90f 	bl	8001cbc <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d803      	bhi.n	8003ab2 <HAL_SPI_Transmit+0x168>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab0:	d102      	bne.n	8003ab8 <HAL_SPI_Transmit+0x16e>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d102      	bne.n	8003abe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003abc:	e074      	b.n	8003ba8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1ce      	bne.n	8003a66 <HAL_SPI_Transmit+0x11c>
 8003ac8:	e04c      	b.n	8003b64 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_SPI_Transmit+0x18e>
 8003ad2:	8afb      	ldrh	r3, [r7, #22]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d140      	bne.n	8003b5a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	330c      	adds	r3, #12
 8003ae2:	7812      	ldrb	r2, [r2, #0]
 8003ae4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003afe:	e02c      	b.n	8003b5a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d113      	bne.n	8003b36 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	330c      	adds	r3, #12
 8003b18:	7812      	ldrb	r2, [r2, #0]
 8003b1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b34:	e011      	b.n	8003b5a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b36:	f7fe f8c1 	bl	8001cbc <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d803      	bhi.n	8003b4e <HAL_SPI_Transmit+0x204>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4c:	d102      	bne.n	8003b54 <HAL_SPI_Transmit+0x20a>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d102      	bne.n	8003b5a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b58:	e026      	b.n	8003ba8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1cd      	bne.n	8003b00 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	6839      	ldr	r1, [r7, #0]
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 fbd9 	bl	8004320 <SPI_EndRxTxTransaction>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10a      	bne.n	8003b98 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b82:	2300      	movs	r3, #0
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	77fb      	strb	r3, [r7, #31]
 8003ba4:	e000      	b.n	8003ba8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003ba6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3720      	adds	r7, #32
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b088      	sub	sp, #32
 8003bc6:	af02      	add	r7, sp, #8
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	603b      	str	r3, [r7, #0]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bde:	d112      	bne.n	8003c06 <HAL_SPI_Receive+0x44>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10e      	bne.n	8003c06 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2204      	movs	r2, #4
 8003bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003bf0:	88fa      	ldrh	r2, [r7, #6]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	68b9      	ldr	r1, [r7, #8]
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f8f1 	bl	8003de4 <HAL_SPI_TransmitReceive>
 8003c02:	4603      	mov	r3, r0
 8003c04:	e0ea      	b.n	8003ddc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_SPI_Receive+0x52>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e0e3      	b.n	8003ddc <HAL_SPI_Receive+0x21a>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c1c:	f7fe f84e 	bl	8001cbc <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d002      	beq.n	8003c34 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c32:	e0ca      	b.n	8003dca <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <HAL_SPI_Receive+0x7e>
 8003c3a:	88fb      	ldrh	r3, [r7, #6]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d102      	bne.n	8003c46 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c44:	e0c1      	b.n	8003dca <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2204      	movs	r2, #4
 8003c4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	88fa      	ldrh	r2, [r7, #6]
 8003c5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	88fa      	ldrh	r2, [r7, #6]
 8003c64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c8c:	d10f      	bne.n	8003cae <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb8:	2b40      	cmp	r3, #64	; 0x40
 8003cba:	d007      	beq.n	8003ccc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d162      	bne.n	8003d9a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003cd4:	e02e      	b.n	8003d34 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d115      	bne.n	8003d10 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f103 020c 	add.w	r2, r3, #12
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	7812      	ldrb	r2, [r2, #0]
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d0e:	e011      	b.n	8003d34 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d10:	f7fd ffd4 	bl	8001cbc <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d803      	bhi.n	8003d28 <HAL_SPI_Receive+0x166>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d26:	d102      	bne.n	8003d2e <HAL_SPI_Receive+0x16c>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d102      	bne.n	8003d34 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d32:	e04a      	b.n	8003dca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1cb      	bne.n	8003cd6 <HAL_SPI_Receive+0x114>
 8003d3e:	e031      	b.n	8003da4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d113      	bne.n	8003d76 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d58:	b292      	uxth	r2, r2
 8003d5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d60:	1c9a      	adds	r2, r3, #2
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d74:	e011      	b.n	8003d9a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d76:	f7fd ffa1 	bl	8001cbc <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d803      	bhi.n	8003d8e <HAL_SPI_Receive+0x1cc>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8c:	d102      	bne.n	8003d94 <HAL_SPI_Receive+0x1d2>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d102      	bne.n	8003d9a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d98:	e017      	b.n	8003dca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1cd      	bne.n	8003d40 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	6839      	ldr	r1, [r7, #0]
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fa53 	bl	8004254 <SPI_EndRxTransaction>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	75fb      	strb	r3, [r7, #23]
 8003dc6:	e000      	b.n	8003dca <HAL_SPI_Receive+0x208>
  }

error :
 8003dc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08c      	sub	sp, #48	; 0x30
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
 8003df0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003df2:	2301      	movs	r3, #1
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_SPI_TransmitReceive+0x26>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e18a      	b.n	8004120 <HAL_SPI_TransmitReceive+0x33c>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e12:	f7fd ff53 	bl	8001cbc <HAL_GetTick>
 8003e16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e28:	887b      	ldrh	r3, [r7, #2]
 8003e2a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d00f      	beq.n	8003e54 <HAL_SPI_TransmitReceive+0x70>
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e3a:	d107      	bne.n	8003e4c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d103      	bne.n	8003e4c <HAL_SPI_TransmitReceive+0x68>
 8003e44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d003      	beq.n	8003e54 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e52:	e15b      	b.n	800410c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d005      	beq.n	8003e66 <HAL_SPI_TransmitReceive+0x82>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <HAL_SPI_TransmitReceive+0x82>
 8003e60:	887b      	ldrh	r3, [r7, #2]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d103      	bne.n	8003e6e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e6c:	e14e      	b.n	800410c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d003      	beq.n	8003e82 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2205      	movs	r2, #5
 8003e7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	887a      	ldrh	r2, [r7, #2]
 8003e92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	887a      	ldrh	r2, [r7, #2]
 8003e98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	887a      	ldrh	r2, [r7, #2]
 8003ea4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	887a      	ldrh	r2, [r7, #2]
 8003eaa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec2:	2b40      	cmp	r3, #64	; 0x40
 8003ec4:	d007      	beq.n	8003ed6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ed4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ede:	d178      	bne.n	8003fd2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <HAL_SPI_TransmitReceive+0x10a>
 8003ee8:	8b7b      	ldrh	r3, [r7, #26]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d166      	bne.n	8003fbc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	881a      	ldrh	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	1c9a      	adds	r2, r3, #2
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f12:	e053      	b.n	8003fbc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d11b      	bne.n	8003f5a <HAL_SPI_TransmitReceive+0x176>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d016      	beq.n	8003f5a <HAL_SPI_TransmitReceive+0x176>
 8003f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d113      	bne.n	8003f5a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	881a      	ldrh	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	1c9a      	adds	r2, r3, #2
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d119      	bne.n	8003f9c <HAL_SPI_TransmitReceive+0x1b8>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d014      	beq.n	8003f9c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	b292      	uxth	r2, r2
 8003f7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f84:	1c9a      	adds	r2, r3, #2
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f9c:	f7fd fe8e 	bl	8001cbc <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d807      	bhi.n	8003fbc <HAL_SPI_TransmitReceive+0x1d8>
 8003fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb2:	d003      	beq.n	8003fbc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003fba:	e0a7      	b.n	800410c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1a6      	bne.n	8003f14 <HAL_SPI_TransmitReceive+0x130>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1a1      	bne.n	8003f14 <HAL_SPI_TransmitReceive+0x130>
 8003fd0:	e07c      	b.n	80040cc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_SPI_TransmitReceive+0x1fc>
 8003fda:	8b7b      	ldrh	r3, [r7, #26]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d16b      	bne.n	80040b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	330c      	adds	r3, #12
 8003fea:	7812      	ldrb	r2, [r2, #0]
 8003fec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004006:	e057      	b.n	80040b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b02      	cmp	r3, #2
 8004014:	d11c      	bne.n	8004050 <HAL_SPI_TransmitReceive+0x26c>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d017      	beq.n	8004050 <HAL_SPI_TransmitReceive+0x26c>
 8004020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004022:	2b01      	cmp	r3, #1
 8004024:	d114      	bne.n	8004050 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	330c      	adds	r3, #12
 8004030:	7812      	ldrb	r2, [r2, #0]
 8004032:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b01      	cmp	r3, #1
 800405c:	d119      	bne.n	8004092 <HAL_SPI_TransmitReceive+0x2ae>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d014      	beq.n	8004092 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800408e:	2301      	movs	r3, #1
 8004090:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004092:	f7fd fe13 	bl	8001cbc <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800409e:	429a      	cmp	r2, r3
 80040a0:	d803      	bhi.n	80040aa <HAL_SPI_TransmitReceive+0x2c6>
 80040a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a8:	d102      	bne.n	80040b0 <HAL_SPI_TransmitReceive+0x2cc>
 80040aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d103      	bne.n	80040b8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80040b6:	e029      	b.n	800410c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1a2      	bne.n	8004008 <HAL_SPI_TransmitReceive+0x224>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d19d      	bne.n	8004008 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f925 	bl	8004320 <SPI_EndRxTxTransaction>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d006      	beq.n	80040ea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80040e8:	e010      	b.n	800410c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10b      	bne.n	800410a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	617b      	str	r3, [r7, #20]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	e000      	b.n	800410c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800410a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800411c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004120:	4618      	mov	r0, r3
 8004122:	3730      	adds	r7, #48	; 0x30
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004136:	b2db      	uxtb	r3, r3
}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	4613      	mov	r3, r2
 8004152:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004154:	f7fd fdb2 	bl	8001cbc <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415c:	1a9b      	subs	r3, r3, r2
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	4413      	add	r3, r2
 8004162:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004164:	f7fd fdaa 	bl	8001cbc <HAL_GetTick>
 8004168:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800416a:	4b39      	ldr	r3, [pc, #228]	; (8004250 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	015b      	lsls	r3, r3, #5
 8004170:	0d1b      	lsrs	r3, r3, #20
 8004172:	69fa      	ldr	r2, [r7, #28]
 8004174:	fb02 f303 	mul.w	r3, r2, r3
 8004178:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800417a:	e054      	b.n	8004226 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004182:	d050      	beq.n	8004226 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004184:	f7fd fd9a 	bl	8001cbc <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	69fa      	ldr	r2, [r7, #28]
 8004190:	429a      	cmp	r2, r3
 8004192:	d902      	bls.n	800419a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d13d      	bne.n	8004216 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041b2:	d111      	bne.n	80041d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041bc:	d004      	beq.n	80041c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c6:	d107      	bne.n	80041d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e0:	d10f      	bne.n	8004202 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004200:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e017      	b.n	8004246 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	3b01      	subs	r3, #1
 8004224:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4013      	ands	r3, r2
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	429a      	cmp	r2, r3
 8004234:	bf0c      	ite	eq
 8004236:	2301      	moveq	r3, #1
 8004238:	2300      	movne	r3, #0
 800423a:	b2db      	uxtb	r3, r3
 800423c:	461a      	mov	r2, r3
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	429a      	cmp	r2, r3
 8004242:	d19b      	bne.n	800417c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3720      	adds	r7, #32
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20000008 	.word	0x20000008

08004254 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af02      	add	r7, sp, #8
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004268:	d111      	bne.n	800428e <SPI_EndRxTransaction+0x3a>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004272:	d004      	beq.n	800427e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427c:	d107      	bne.n	800428e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800428c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004296:	d12a      	bne.n	80042ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a0:	d012      	beq.n	80042c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2200      	movs	r2, #0
 80042aa:	2180      	movs	r1, #128	; 0x80
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f7ff ff49 	bl	8004144 <SPI_WaitFlagStateUntilTimeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d02d      	beq.n	8004314 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042bc:	f043 0220 	orr.w	r2, r3, #32
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e026      	b.n	8004316 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2200      	movs	r2, #0
 80042d0:	2101      	movs	r1, #1
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7ff ff36 	bl	8004144 <SPI_WaitFlagStateUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d01a      	beq.n	8004314 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e2:	f043 0220 	orr.w	r2, r3, #32
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e013      	b.n	8004316 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2200      	movs	r2, #0
 80042f6:	2101      	movs	r1, #1
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f7ff ff23 	bl	8004144 <SPI_WaitFlagStateUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d007      	beq.n	8004314 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004308:	f043 0220 	orr.w	r2, r3, #32
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e000      	b.n	8004316 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af02      	add	r7, sp, #8
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800432c:	4b1b      	ldr	r3, [pc, #108]	; (800439c <SPI_EndRxTxTransaction+0x7c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a1b      	ldr	r2, [pc, #108]	; (80043a0 <SPI_EndRxTxTransaction+0x80>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	0d5b      	lsrs	r3, r3, #21
 8004338:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800433c:	fb02 f303 	mul.w	r3, r2, r3
 8004340:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800434a:	d112      	bne.n	8004372 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2200      	movs	r2, #0
 8004354:	2180      	movs	r1, #128	; 0x80
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f7ff fef4 	bl	8004144 <SPI_WaitFlagStateUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d016      	beq.n	8004390 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004366:	f043 0220 	orr.w	r2, r3, #32
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e00f      	b.n	8004392 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	3b01      	subs	r3, #1
 800437c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004388:	2b80      	cmp	r3, #128	; 0x80
 800438a:	d0f2      	beq.n	8004372 <SPI_EndRxTxTransaction+0x52>
 800438c:	e000      	b.n	8004390 <SPI_EndRxTxTransaction+0x70>
        break;
 800438e:	bf00      	nop
  }

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	20000008 	.word	0x20000008
 80043a0:	165e9f81 	.word	0x165e9f81

080043a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e041      	b.n	800443a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7fd fb30 	bl	8001a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3304      	adds	r3, #4
 80043e0:	4619      	mov	r1, r3
 80043e2:	4610      	mov	r0, r2
 80043e4:	f000 fa96 	bl	8004914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b01      	cmp	r3, #1
 8004456:	d001      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e04e      	b.n	80044fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0201 	orr.w	r2, r2, #1
 8004472:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a23      	ldr	r2, [pc, #140]	; (8004508 <HAL_TIM_Base_Start_IT+0xc4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d022      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x80>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004486:	d01d      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x80>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1f      	ldr	r2, [pc, #124]	; (800450c <HAL_TIM_Base_Start_IT+0xc8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d018      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x80>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1e      	ldr	r2, [pc, #120]	; (8004510 <HAL_TIM_Base_Start_IT+0xcc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d013      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x80>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1c      	ldr	r2, [pc, #112]	; (8004514 <HAL_TIM_Base_Start_IT+0xd0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00e      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x80>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1b      	ldr	r2, [pc, #108]	; (8004518 <HAL_TIM_Base_Start_IT+0xd4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d009      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x80>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a19      	ldr	r2, [pc, #100]	; (800451c <HAL_TIM_Base_Start_IT+0xd8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x80>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a18      	ldr	r2, [pc, #96]	; (8004520 <HAL_TIM_Base_Start_IT+0xdc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d111      	bne.n	80044e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b06      	cmp	r3, #6
 80044d4:	d010      	beq.n	80044f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0201 	orr.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e6:	e007      	b.n	80044f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	40010000 	.word	0x40010000
 800450c:	40000400 	.word	0x40000400
 8004510:	40000800 	.word	0x40000800
 8004514:	40000c00 	.word	0x40000c00
 8004518:	40010400 	.word	0x40010400
 800451c:	40014000 	.word	0x40014000
 8004520:	40001800 	.word	0x40001800

08004524 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b02      	cmp	r3, #2
 8004538:	d122      	bne.n	8004580 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b02      	cmp	r3, #2
 8004546:	d11b      	bne.n	8004580 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0202 	mvn.w	r2, #2
 8004550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f9b5 	bl	80048d6 <HAL_TIM_IC_CaptureCallback>
 800456c:	e005      	b.n	800457a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f9a7 	bl	80048c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f9b8 	bl	80048ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b04      	cmp	r3, #4
 800458c:	d122      	bne.n	80045d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b04      	cmp	r3, #4
 800459a:	d11b      	bne.n	80045d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0204 	mvn.w	r2, #4
 80045a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2202      	movs	r2, #2
 80045aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f98b 	bl	80048d6 <HAL_TIM_IC_CaptureCallback>
 80045c0:	e005      	b.n	80045ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f97d 	bl	80048c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f98e 	bl	80048ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d122      	bne.n	8004628 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d11b      	bne.n	8004628 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0208 	mvn.w	r2, #8
 80045f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2204      	movs	r2, #4
 80045fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f961 	bl	80048d6 <HAL_TIM_IC_CaptureCallback>
 8004614:	e005      	b.n	8004622 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f953 	bl	80048c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f964 	bl	80048ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	2b10      	cmp	r3, #16
 8004634:	d122      	bne.n	800467c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b10      	cmp	r3, #16
 8004642:	d11b      	bne.n	800467c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0210 	mvn.w	r2, #16
 800464c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2208      	movs	r2, #8
 8004652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f937 	bl	80048d6 <HAL_TIM_IC_CaptureCallback>
 8004668:	e005      	b.n	8004676 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f929 	bl	80048c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f93a 	bl	80048ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b01      	cmp	r3, #1
 8004688:	d10e      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b01      	cmp	r3, #1
 8004696:	d107      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0201 	mvn.w	r2, #1
 80046a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fc fdbc 	bl	8001220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b2:	2b80      	cmp	r3, #128	; 0x80
 80046b4:	d10e      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	2b80      	cmp	r3, #128	; 0x80
 80046c2:	d107      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fae0 	bl	8004c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046de:	2b40      	cmp	r3, #64	; 0x40
 80046e0:	d10e      	bne.n	8004700 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ec:	2b40      	cmp	r3, #64	; 0x40
 80046ee:	d107      	bne.n	8004700 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f8ff 	bl	80048fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	2b20      	cmp	r3, #32
 800470c:	d10e      	bne.n	800472c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b20      	cmp	r3, #32
 800471a:	d107      	bne.n	800472c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0220 	mvn.w	r2, #32
 8004724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 faaa 	bl	8004c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800472c:	bf00      	nop
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <HAL_TIM_ConfigClockSource+0x1c>
 800474c:	2302      	movs	r3, #2
 800474e:	e0b4      	b.n	80048ba <HAL_TIM_ConfigClockSource+0x186>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800476e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004776:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004788:	d03e      	beq.n	8004808 <HAL_TIM_ConfigClockSource+0xd4>
 800478a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800478e:	f200 8087 	bhi.w	80048a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004796:	f000 8086 	beq.w	80048a6 <HAL_TIM_ConfigClockSource+0x172>
 800479a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479e:	d87f      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x16c>
 80047a0:	2b70      	cmp	r3, #112	; 0x70
 80047a2:	d01a      	beq.n	80047da <HAL_TIM_ConfigClockSource+0xa6>
 80047a4:	2b70      	cmp	r3, #112	; 0x70
 80047a6:	d87b      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x16c>
 80047a8:	2b60      	cmp	r3, #96	; 0x60
 80047aa:	d050      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x11a>
 80047ac:	2b60      	cmp	r3, #96	; 0x60
 80047ae:	d877      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x16c>
 80047b0:	2b50      	cmp	r3, #80	; 0x50
 80047b2:	d03c      	beq.n	800482e <HAL_TIM_ConfigClockSource+0xfa>
 80047b4:	2b50      	cmp	r3, #80	; 0x50
 80047b6:	d873      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x16c>
 80047b8:	2b40      	cmp	r3, #64	; 0x40
 80047ba:	d058      	beq.n	800486e <HAL_TIM_ConfigClockSource+0x13a>
 80047bc:	2b40      	cmp	r3, #64	; 0x40
 80047be:	d86f      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x16c>
 80047c0:	2b30      	cmp	r3, #48	; 0x30
 80047c2:	d064      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x15a>
 80047c4:	2b30      	cmp	r3, #48	; 0x30
 80047c6:	d86b      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x16c>
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d060      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x15a>
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	d867      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x16c>
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d05c      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x15a>
 80047d4:	2b10      	cmp	r3, #16
 80047d6:	d05a      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x15a>
 80047d8:	e062      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6818      	ldr	r0, [r3, #0]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6899      	ldr	r1, [r3, #8]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f000 f9ad 	bl	8004b48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	609a      	str	r2, [r3, #8]
      break;
 8004806:	e04f      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6818      	ldr	r0, [r3, #0]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	6899      	ldr	r1, [r3, #8]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f000 f996 	bl	8004b48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800482a:	609a      	str	r2, [r3, #8]
      break;
 800482c:	e03c      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6859      	ldr	r1, [r3, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	461a      	mov	r2, r3
 800483c:	f000 f90a 	bl	8004a54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2150      	movs	r1, #80	; 0x50
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f963 	bl	8004b12 <TIM_ITRx_SetConfig>
      break;
 800484c:	e02c      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6818      	ldr	r0, [r3, #0]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	6859      	ldr	r1, [r3, #4]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	461a      	mov	r2, r3
 800485c:	f000 f929 	bl	8004ab2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2160      	movs	r1, #96	; 0x60
 8004866:	4618      	mov	r0, r3
 8004868:	f000 f953 	bl	8004b12 <TIM_ITRx_SetConfig>
      break;
 800486c:	e01c      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	6859      	ldr	r1, [r3, #4]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	461a      	mov	r2, r3
 800487c:	f000 f8ea 	bl	8004a54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2140      	movs	r1, #64	; 0x40
 8004886:	4618      	mov	r0, r3
 8004888:	f000 f943 	bl	8004b12 <TIM_ITRx_SetConfig>
      break;
 800488c:	e00c      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4619      	mov	r1, r3
 8004898:	4610      	mov	r0, r2
 800489a:	f000 f93a 	bl	8004b12 <TIM_ITRx_SetConfig>
      break;
 800489e:	e003      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
      break;
 80048a4:	e000      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
	...

08004914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a40      	ldr	r2, [pc, #256]	; (8004a28 <TIM_Base_SetConfig+0x114>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d013      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004932:	d00f      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a3d      	ldr	r2, [pc, #244]	; (8004a2c <TIM_Base_SetConfig+0x118>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d00b      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a3c      	ldr	r2, [pc, #240]	; (8004a30 <TIM_Base_SetConfig+0x11c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d007      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a3b      	ldr	r2, [pc, #236]	; (8004a34 <TIM_Base_SetConfig+0x120>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d003      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a3a      	ldr	r2, [pc, #232]	; (8004a38 <TIM_Base_SetConfig+0x124>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d108      	bne.n	8004966 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a2f      	ldr	r2, [pc, #188]	; (8004a28 <TIM_Base_SetConfig+0x114>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d02b      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004974:	d027      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a2c      	ldr	r2, [pc, #176]	; (8004a2c <TIM_Base_SetConfig+0x118>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d023      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a2b      	ldr	r2, [pc, #172]	; (8004a30 <TIM_Base_SetConfig+0x11c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d01f      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a2a      	ldr	r2, [pc, #168]	; (8004a34 <TIM_Base_SetConfig+0x120>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d01b      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a29      	ldr	r2, [pc, #164]	; (8004a38 <TIM_Base_SetConfig+0x124>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d017      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a28      	ldr	r2, [pc, #160]	; (8004a3c <TIM_Base_SetConfig+0x128>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d013      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a27      	ldr	r2, [pc, #156]	; (8004a40 <TIM_Base_SetConfig+0x12c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00f      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a26      	ldr	r2, [pc, #152]	; (8004a44 <TIM_Base_SetConfig+0x130>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00b      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a25      	ldr	r2, [pc, #148]	; (8004a48 <TIM_Base_SetConfig+0x134>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d007      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a24      	ldr	r2, [pc, #144]	; (8004a4c <TIM_Base_SetConfig+0x138>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d003      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a23      	ldr	r2, [pc, #140]	; (8004a50 <TIM_Base_SetConfig+0x13c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d108      	bne.n	80049d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a0a      	ldr	r2, [pc, #40]	; (8004a28 <TIM_Base_SetConfig+0x114>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d003      	beq.n	8004a0c <TIM_Base_SetConfig+0xf8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a0c      	ldr	r2, [pc, #48]	; (8004a38 <TIM_Base_SetConfig+0x124>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d103      	bne.n	8004a14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	615a      	str	r2, [r3, #20]
}
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40010000 	.word	0x40010000
 8004a2c:	40000400 	.word	0x40000400
 8004a30:	40000800 	.word	0x40000800
 8004a34:	40000c00 	.word	0x40000c00
 8004a38:	40010400 	.word	0x40010400
 8004a3c:	40014000 	.word	0x40014000
 8004a40:	40014400 	.word	0x40014400
 8004a44:	40014800 	.word	0x40014800
 8004a48:	40001800 	.word	0x40001800
 8004a4c:	40001c00 	.word	0x40001c00
 8004a50:	40002000 	.word	0x40002000

08004a54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f023 0201 	bic.w	r2, r3, #1
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f023 030a 	bic.w	r3, r3, #10
 8004a90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	621a      	str	r2, [r3, #32]
}
 8004aa6:	bf00      	nop
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b087      	sub	sp, #28
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	f023 0210 	bic.w	r2, r3, #16
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004adc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	031b      	lsls	r3, r3, #12
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004aee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	621a      	str	r2, [r3, #32]
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f043 0307 	orr.w	r3, r3, #7
 8004b34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	609a      	str	r2, [r3, #8]
}
 8004b3c:	bf00      	nop
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	021a      	lsls	r2, r3, #8
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	609a      	str	r2, [r3, #8]
}
 8004b7c:	bf00      	nop
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e05a      	b.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a21      	ldr	r2, [pc, #132]	; (8004c64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d022      	beq.n	8004c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bec:	d01d      	beq.n	8004c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a1d      	ldr	r2, [pc, #116]	; (8004c68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d018      	beq.n	8004c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a1b      	ldr	r2, [pc, #108]	; (8004c6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d013      	beq.n	8004c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a1a      	ldr	r2, [pc, #104]	; (8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00e      	beq.n	8004c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a18      	ldr	r2, [pc, #96]	; (8004c74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d009      	beq.n	8004c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a17      	ldr	r2, [pc, #92]	; (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d004      	beq.n	8004c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a15      	ldr	r2, [pc, #84]	; (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d10c      	bne.n	8004c44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	40010000 	.word	0x40010000
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000800 	.word	0x40000800
 8004c70:	40000c00 	.word	0x40000c00
 8004c74:	40010400 	.word	0x40010400
 8004c78:	40014000 	.word	0x40014000
 8004c7c:	40001800 	.word	0x40001800

08004c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <__errno>:
 8004ca8:	4b01      	ldr	r3, [pc, #4]	; (8004cb0 <__errno+0x8>)
 8004caa:	6818      	ldr	r0, [r3, #0]
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	20000014 	.word	0x20000014

08004cb4 <__libc_init_array>:
 8004cb4:	b570      	push	{r4, r5, r6, lr}
 8004cb6:	4d0d      	ldr	r5, [pc, #52]	; (8004cec <__libc_init_array+0x38>)
 8004cb8:	4c0d      	ldr	r4, [pc, #52]	; (8004cf0 <__libc_init_array+0x3c>)
 8004cba:	1b64      	subs	r4, r4, r5
 8004cbc:	10a4      	asrs	r4, r4, #2
 8004cbe:	2600      	movs	r6, #0
 8004cc0:	42a6      	cmp	r6, r4
 8004cc2:	d109      	bne.n	8004cd8 <__libc_init_array+0x24>
 8004cc4:	4d0b      	ldr	r5, [pc, #44]	; (8004cf4 <__libc_init_array+0x40>)
 8004cc6:	4c0c      	ldr	r4, [pc, #48]	; (8004cf8 <__libc_init_array+0x44>)
 8004cc8:	f000 fc4e 	bl	8005568 <_init>
 8004ccc:	1b64      	subs	r4, r4, r5
 8004cce:	10a4      	asrs	r4, r4, #2
 8004cd0:	2600      	movs	r6, #0
 8004cd2:	42a6      	cmp	r6, r4
 8004cd4:	d105      	bne.n	8004ce2 <__libc_init_array+0x2e>
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}
 8004cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cdc:	4798      	blx	r3
 8004cde:	3601      	adds	r6, #1
 8004ce0:	e7ee      	b.n	8004cc0 <__libc_init_array+0xc>
 8004ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce6:	4798      	blx	r3
 8004ce8:	3601      	adds	r6, #1
 8004cea:	e7f2      	b.n	8004cd2 <__libc_init_array+0x1e>
 8004cec:	08005e54 	.word	0x08005e54
 8004cf0:	08005e54 	.word	0x08005e54
 8004cf4:	08005e54 	.word	0x08005e54
 8004cf8:	08005e58 	.word	0x08005e58

08004cfc <memset>:
 8004cfc:	4402      	add	r2, r0
 8004cfe:	4603      	mov	r3, r0
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d100      	bne.n	8004d06 <memset+0xa>
 8004d04:	4770      	bx	lr
 8004d06:	f803 1b01 	strb.w	r1, [r3], #1
 8004d0a:	e7f9      	b.n	8004d00 <memset+0x4>

08004d0c <siprintf>:
 8004d0c:	b40e      	push	{r1, r2, r3}
 8004d0e:	b500      	push	{lr}
 8004d10:	b09c      	sub	sp, #112	; 0x70
 8004d12:	ab1d      	add	r3, sp, #116	; 0x74
 8004d14:	9002      	str	r0, [sp, #8]
 8004d16:	9006      	str	r0, [sp, #24]
 8004d18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d1c:	4809      	ldr	r0, [pc, #36]	; (8004d44 <siprintf+0x38>)
 8004d1e:	9107      	str	r1, [sp, #28]
 8004d20:	9104      	str	r1, [sp, #16]
 8004d22:	4909      	ldr	r1, [pc, #36]	; (8004d48 <siprintf+0x3c>)
 8004d24:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d28:	9105      	str	r1, [sp, #20]
 8004d2a:	6800      	ldr	r0, [r0, #0]
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	a902      	add	r1, sp, #8
 8004d30:	f000 f868 	bl	8004e04 <_svfiprintf_r>
 8004d34:	9b02      	ldr	r3, [sp, #8]
 8004d36:	2200      	movs	r2, #0
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	b01c      	add	sp, #112	; 0x70
 8004d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d40:	b003      	add	sp, #12
 8004d42:	4770      	bx	lr
 8004d44:	20000014 	.word	0x20000014
 8004d48:	ffff0208 	.word	0xffff0208

08004d4c <__ssputs_r>:
 8004d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d50:	688e      	ldr	r6, [r1, #8]
 8004d52:	429e      	cmp	r6, r3
 8004d54:	4682      	mov	sl, r0
 8004d56:	460c      	mov	r4, r1
 8004d58:	4690      	mov	r8, r2
 8004d5a:	461f      	mov	r7, r3
 8004d5c:	d838      	bhi.n	8004dd0 <__ssputs_r+0x84>
 8004d5e:	898a      	ldrh	r2, [r1, #12]
 8004d60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d64:	d032      	beq.n	8004dcc <__ssputs_r+0x80>
 8004d66:	6825      	ldr	r5, [r4, #0]
 8004d68:	6909      	ldr	r1, [r1, #16]
 8004d6a:	eba5 0901 	sub.w	r9, r5, r1
 8004d6e:	6965      	ldr	r5, [r4, #20]
 8004d70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d78:	3301      	adds	r3, #1
 8004d7a:	444b      	add	r3, r9
 8004d7c:	106d      	asrs	r5, r5, #1
 8004d7e:	429d      	cmp	r5, r3
 8004d80:	bf38      	it	cc
 8004d82:	461d      	movcc	r5, r3
 8004d84:	0553      	lsls	r3, r2, #21
 8004d86:	d531      	bpl.n	8004dec <__ssputs_r+0xa0>
 8004d88:	4629      	mov	r1, r5
 8004d8a:	f000 fb47 	bl	800541c <_malloc_r>
 8004d8e:	4606      	mov	r6, r0
 8004d90:	b950      	cbnz	r0, 8004da8 <__ssputs_r+0x5c>
 8004d92:	230c      	movs	r3, #12
 8004d94:	f8ca 3000 	str.w	r3, [sl]
 8004d98:	89a3      	ldrh	r3, [r4, #12]
 8004d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d9e:	81a3      	strh	r3, [r4, #12]
 8004da0:	f04f 30ff 	mov.w	r0, #4294967295
 8004da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da8:	6921      	ldr	r1, [r4, #16]
 8004daa:	464a      	mov	r2, r9
 8004dac:	f000 fabe 	bl	800532c <memcpy>
 8004db0:	89a3      	ldrh	r3, [r4, #12]
 8004db2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dba:	81a3      	strh	r3, [r4, #12]
 8004dbc:	6126      	str	r6, [r4, #16]
 8004dbe:	6165      	str	r5, [r4, #20]
 8004dc0:	444e      	add	r6, r9
 8004dc2:	eba5 0509 	sub.w	r5, r5, r9
 8004dc6:	6026      	str	r6, [r4, #0]
 8004dc8:	60a5      	str	r5, [r4, #8]
 8004dca:	463e      	mov	r6, r7
 8004dcc:	42be      	cmp	r6, r7
 8004dce:	d900      	bls.n	8004dd2 <__ssputs_r+0x86>
 8004dd0:	463e      	mov	r6, r7
 8004dd2:	4632      	mov	r2, r6
 8004dd4:	6820      	ldr	r0, [r4, #0]
 8004dd6:	4641      	mov	r1, r8
 8004dd8:	f000 fab6 	bl	8005348 <memmove>
 8004ddc:	68a3      	ldr	r3, [r4, #8]
 8004dde:	6822      	ldr	r2, [r4, #0]
 8004de0:	1b9b      	subs	r3, r3, r6
 8004de2:	4432      	add	r2, r6
 8004de4:	60a3      	str	r3, [r4, #8]
 8004de6:	6022      	str	r2, [r4, #0]
 8004de8:	2000      	movs	r0, #0
 8004dea:	e7db      	b.n	8004da4 <__ssputs_r+0x58>
 8004dec:	462a      	mov	r2, r5
 8004dee:	f000 fb6f 	bl	80054d0 <_realloc_r>
 8004df2:	4606      	mov	r6, r0
 8004df4:	2800      	cmp	r0, #0
 8004df6:	d1e1      	bne.n	8004dbc <__ssputs_r+0x70>
 8004df8:	6921      	ldr	r1, [r4, #16]
 8004dfa:	4650      	mov	r0, sl
 8004dfc:	f000 fabe 	bl	800537c <_free_r>
 8004e00:	e7c7      	b.n	8004d92 <__ssputs_r+0x46>
	...

08004e04 <_svfiprintf_r>:
 8004e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e08:	4698      	mov	r8, r3
 8004e0a:	898b      	ldrh	r3, [r1, #12]
 8004e0c:	061b      	lsls	r3, r3, #24
 8004e0e:	b09d      	sub	sp, #116	; 0x74
 8004e10:	4607      	mov	r7, r0
 8004e12:	460d      	mov	r5, r1
 8004e14:	4614      	mov	r4, r2
 8004e16:	d50e      	bpl.n	8004e36 <_svfiprintf_r+0x32>
 8004e18:	690b      	ldr	r3, [r1, #16]
 8004e1a:	b963      	cbnz	r3, 8004e36 <_svfiprintf_r+0x32>
 8004e1c:	2140      	movs	r1, #64	; 0x40
 8004e1e:	f000 fafd 	bl	800541c <_malloc_r>
 8004e22:	6028      	str	r0, [r5, #0]
 8004e24:	6128      	str	r0, [r5, #16]
 8004e26:	b920      	cbnz	r0, 8004e32 <_svfiprintf_r+0x2e>
 8004e28:	230c      	movs	r3, #12
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e30:	e0d1      	b.n	8004fd6 <_svfiprintf_r+0x1d2>
 8004e32:	2340      	movs	r3, #64	; 0x40
 8004e34:	616b      	str	r3, [r5, #20]
 8004e36:	2300      	movs	r3, #0
 8004e38:	9309      	str	r3, [sp, #36]	; 0x24
 8004e3a:	2320      	movs	r3, #32
 8004e3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e40:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e44:	2330      	movs	r3, #48	; 0x30
 8004e46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ff0 <_svfiprintf_r+0x1ec>
 8004e4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e4e:	f04f 0901 	mov.w	r9, #1
 8004e52:	4623      	mov	r3, r4
 8004e54:	469a      	mov	sl, r3
 8004e56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e5a:	b10a      	cbz	r2, 8004e60 <_svfiprintf_r+0x5c>
 8004e5c:	2a25      	cmp	r2, #37	; 0x25
 8004e5e:	d1f9      	bne.n	8004e54 <_svfiprintf_r+0x50>
 8004e60:	ebba 0b04 	subs.w	fp, sl, r4
 8004e64:	d00b      	beq.n	8004e7e <_svfiprintf_r+0x7a>
 8004e66:	465b      	mov	r3, fp
 8004e68:	4622      	mov	r2, r4
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	4638      	mov	r0, r7
 8004e6e:	f7ff ff6d 	bl	8004d4c <__ssputs_r>
 8004e72:	3001      	adds	r0, #1
 8004e74:	f000 80aa 	beq.w	8004fcc <_svfiprintf_r+0x1c8>
 8004e78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e7a:	445a      	add	r2, fp
 8004e7c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 80a2 	beq.w	8004fcc <_svfiprintf_r+0x1c8>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e92:	f10a 0a01 	add.w	sl, sl, #1
 8004e96:	9304      	str	r3, [sp, #16]
 8004e98:	9307      	str	r3, [sp, #28]
 8004e9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e9e:	931a      	str	r3, [sp, #104]	; 0x68
 8004ea0:	4654      	mov	r4, sl
 8004ea2:	2205      	movs	r2, #5
 8004ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ea8:	4851      	ldr	r0, [pc, #324]	; (8004ff0 <_svfiprintf_r+0x1ec>)
 8004eaa:	f7fb f991 	bl	80001d0 <memchr>
 8004eae:	9a04      	ldr	r2, [sp, #16]
 8004eb0:	b9d8      	cbnz	r0, 8004eea <_svfiprintf_r+0xe6>
 8004eb2:	06d0      	lsls	r0, r2, #27
 8004eb4:	bf44      	itt	mi
 8004eb6:	2320      	movmi	r3, #32
 8004eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ebc:	0711      	lsls	r1, r2, #28
 8004ebe:	bf44      	itt	mi
 8004ec0:	232b      	movmi	r3, #43	; 0x2b
 8004ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ec6:	f89a 3000 	ldrb.w	r3, [sl]
 8004eca:	2b2a      	cmp	r3, #42	; 0x2a
 8004ecc:	d015      	beq.n	8004efa <_svfiprintf_r+0xf6>
 8004ece:	9a07      	ldr	r2, [sp, #28]
 8004ed0:	4654      	mov	r4, sl
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	f04f 0c0a 	mov.w	ip, #10
 8004ed8:	4621      	mov	r1, r4
 8004eda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ede:	3b30      	subs	r3, #48	; 0x30
 8004ee0:	2b09      	cmp	r3, #9
 8004ee2:	d94e      	bls.n	8004f82 <_svfiprintf_r+0x17e>
 8004ee4:	b1b0      	cbz	r0, 8004f14 <_svfiprintf_r+0x110>
 8004ee6:	9207      	str	r2, [sp, #28]
 8004ee8:	e014      	b.n	8004f14 <_svfiprintf_r+0x110>
 8004eea:	eba0 0308 	sub.w	r3, r0, r8
 8004eee:	fa09 f303 	lsl.w	r3, r9, r3
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	9304      	str	r3, [sp, #16]
 8004ef6:	46a2      	mov	sl, r4
 8004ef8:	e7d2      	b.n	8004ea0 <_svfiprintf_r+0x9c>
 8004efa:	9b03      	ldr	r3, [sp, #12]
 8004efc:	1d19      	adds	r1, r3, #4
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	9103      	str	r1, [sp, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	bfbb      	ittet	lt
 8004f06:	425b      	neglt	r3, r3
 8004f08:	f042 0202 	orrlt.w	r2, r2, #2
 8004f0c:	9307      	strge	r3, [sp, #28]
 8004f0e:	9307      	strlt	r3, [sp, #28]
 8004f10:	bfb8      	it	lt
 8004f12:	9204      	strlt	r2, [sp, #16]
 8004f14:	7823      	ldrb	r3, [r4, #0]
 8004f16:	2b2e      	cmp	r3, #46	; 0x2e
 8004f18:	d10c      	bne.n	8004f34 <_svfiprintf_r+0x130>
 8004f1a:	7863      	ldrb	r3, [r4, #1]
 8004f1c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f1e:	d135      	bne.n	8004f8c <_svfiprintf_r+0x188>
 8004f20:	9b03      	ldr	r3, [sp, #12]
 8004f22:	1d1a      	adds	r2, r3, #4
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	9203      	str	r2, [sp, #12]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	bfb8      	it	lt
 8004f2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f30:	3402      	adds	r4, #2
 8004f32:	9305      	str	r3, [sp, #20]
 8004f34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005000 <_svfiprintf_r+0x1fc>
 8004f38:	7821      	ldrb	r1, [r4, #0]
 8004f3a:	2203      	movs	r2, #3
 8004f3c:	4650      	mov	r0, sl
 8004f3e:	f7fb f947 	bl	80001d0 <memchr>
 8004f42:	b140      	cbz	r0, 8004f56 <_svfiprintf_r+0x152>
 8004f44:	2340      	movs	r3, #64	; 0x40
 8004f46:	eba0 000a 	sub.w	r0, r0, sl
 8004f4a:	fa03 f000 	lsl.w	r0, r3, r0
 8004f4e:	9b04      	ldr	r3, [sp, #16]
 8004f50:	4303      	orrs	r3, r0
 8004f52:	3401      	adds	r4, #1
 8004f54:	9304      	str	r3, [sp, #16]
 8004f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f5a:	4826      	ldr	r0, [pc, #152]	; (8004ff4 <_svfiprintf_r+0x1f0>)
 8004f5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f60:	2206      	movs	r2, #6
 8004f62:	f7fb f935 	bl	80001d0 <memchr>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	d038      	beq.n	8004fdc <_svfiprintf_r+0x1d8>
 8004f6a:	4b23      	ldr	r3, [pc, #140]	; (8004ff8 <_svfiprintf_r+0x1f4>)
 8004f6c:	bb1b      	cbnz	r3, 8004fb6 <_svfiprintf_r+0x1b2>
 8004f6e:	9b03      	ldr	r3, [sp, #12]
 8004f70:	3307      	adds	r3, #7
 8004f72:	f023 0307 	bic.w	r3, r3, #7
 8004f76:	3308      	adds	r3, #8
 8004f78:	9303      	str	r3, [sp, #12]
 8004f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f7c:	4433      	add	r3, r6
 8004f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f80:	e767      	b.n	8004e52 <_svfiprintf_r+0x4e>
 8004f82:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f86:	460c      	mov	r4, r1
 8004f88:	2001      	movs	r0, #1
 8004f8a:	e7a5      	b.n	8004ed8 <_svfiprintf_r+0xd4>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	3401      	adds	r4, #1
 8004f90:	9305      	str	r3, [sp, #20]
 8004f92:	4619      	mov	r1, r3
 8004f94:	f04f 0c0a 	mov.w	ip, #10
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f9e:	3a30      	subs	r2, #48	; 0x30
 8004fa0:	2a09      	cmp	r2, #9
 8004fa2:	d903      	bls.n	8004fac <_svfiprintf_r+0x1a8>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0c5      	beq.n	8004f34 <_svfiprintf_r+0x130>
 8004fa8:	9105      	str	r1, [sp, #20]
 8004faa:	e7c3      	b.n	8004f34 <_svfiprintf_r+0x130>
 8004fac:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e7f0      	b.n	8004f98 <_svfiprintf_r+0x194>
 8004fb6:	ab03      	add	r3, sp, #12
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	462a      	mov	r2, r5
 8004fbc:	4b0f      	ldr	r3, [pc, #60]	; (8004ffc <_svfiprintf_r+0x1f8>)
 8004fbe:	a904      	add	r1, sp, #16
 8004fc0:	4638      	mov	r0, r7
 8004fc2:	f3af 8000 	nop.w
 8004fc6:	1c42      	adds	r2, r0, #1
 8004fc8:	4606      	mov	r6, r0
 8004fca:	d1d6      	bne.n	8004f7a <_svfiprintf_r+0x176>
 8004fcc:	89ab      	ldrh	r3, [r5, #12]
 8004fce:	065b      	lsls	r3, r3, #25
 8004fd0:	f53f af2c 	bmi.w	8004e2c <_svfiprintf_r+0x28>
 8004fd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fd6:	b01d      	add	sp, #116	; 0x74
 8004fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fdc:	ab03      	add	r3, sp, #12
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	462a      	mov	r2, r5
 8004fe2:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <_svfiprintf_r+0x1f8>)
 8004fe4:	a904      	add	r1, sp, #16
 8004fe6:	4638      	mov	r0, r7
 8004fe8:	f000 f87a 	bl	80050e0 <_printf_i>
 8004fec:	e7eb      	b.n	8004fc6 <_svfiprintf_r+0x1c2>
 8004fee:	bf00      	nop
 8004ff0:	08005e18 	.word	0x08005e18
 8004ff4:	08005e22 	.word	0x08005e22
 8004ff8:	00000000 	.word	0x00000000
 8004ffc:	08004d4d 	.word	0x08004d4d
 8005000:	08005e1e 	.word	0x08005e1e

08005004 <_printf_common>:
 8005004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005008:	4616      	mov	r6, r2
 800500a:	4699      	mov	r9, r3
 800500c:	688a      	ldr	r2, [r1, #8]
 800500e:	690b      	ldr	r3, [r1, #16]
 8005010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005014:	4293      	cmp	r3, r2
 8005016:	bfb8      	it	lt
 8005018:	4613      	movlt	r3, r2
 800501a:	6033      	str	r3, [r6, #0]
 800501c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005020:	4607      	mov	r7, r0
 8005022:	460c      	mov	r4, r1
 8005024:	b10a      	cbz	r2, 800502a <_printf_common+0x26>
 8005026:	3301      	adds	r3, #1
 8005028:	6033      	str	r3, [r6, #0]
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	0699      	lsls	r1, r3, #26
 800502e:	bf42      	ittt	mi
 8005030:	6833      	ldrmi	r3, [r6, #0]
 8005032:	3302      	addmi	r3, #2
 8005034:	6033      	strmi	r3, [r6, #0]
 8005036:	6825      	ldr	r5, [r4, #0]
 8005038:	f015 0506 	ands.w	r5, r5, #6
 800503c:	d106      	bne.n	800504c <_printf_common+0x48>
 800503e:	f104 0a19 	add.w	sl, r4, #25
 8005042:	68e3      	ldr	r3, [r4, #12]
 8005044:	6832      	ldr	r2, [r6, #0]
 8005046:	1a9b      	subs	r3, r3, r2
 8005048:	42ab      	cmp	r3, r5
 800504a:	dc26      	bgt.n	800509a <_printf_common+0x96>
 800504c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005050:	1e13      	subs	r3, r2, #0
 8005052:	6822      	ldr	r2, [r4, #0]
 8005054:	bf18      	it	ne
 8005056:	2301      	movne	r3, #1
 8005058:	0692      	lsls	r2, r2, #26
 800505a:	d42b      	bmi.n	80050b4 <_printf_common+0xb0>
 800505c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005060:	4649      	mov	r1, r9
 8005062:	4638      	mov	r0, r7
 8005064:	47c0      	blx	r8
 8005066:	3001      	adds	r0, #1
 8005068:	d01e      	beq.n	80050a8 <_printf_common+0xa4>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	68e5      	ldr	r5, [r4, #12]
 800506e:	6832      	ldr	r2, [r6, #0]
 8005070:	f003 0306 	and.w	r3, r3, #6
 8005074:	2b04      	cmp	r3, #4
 8005076:	bf08      	it	eq
 8005078:	1aad      	subeq	r5, r5, r2
 800507a:	68a3      	ldr	r3, [r4, #8]
 800507c:	6922      	ldr	r2, [r4, #16]
 800507e:	bf0c      	ite	eq
 8005080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005084:	2500      	movne	r5, #0
 8005086:	4293      	cmp	r3, r2
 8005088:	bfc4      	itt	gt
 800508a:	1a9b      	subgt	r3, r3, r2
 800508c:	18ed      	addgt	r5, r5, r3
 800508e:	2600      	movs	r6, #0
 8005090:	341a      	adds	r4, #26
 8005092:	42b5      	cmp	r5, r6
 8005094:	d11a      	bne.n	80050cc <_printf_common+0xc8>
 8005096:	2000      	movs	r0, #0
 8005098:	e008      	b.n	80050ac <_printf_common+0xa8>
 800509a:	2301      	movs	r3, #1
 800509c:	4652      	mov	r2, sl
 800509e:	4649      	mov	r1, r9
 80050a0:	4638      	mov	r0, r7
 80050a2:	47c0      	blx	r8
 80050a4:	3001      	adds	r0, #1
 80050a6:	d103      	bne.n	80050b0 <_printf_common+0xac>
 80050a8:	f04f 30ff 	mov.w	r0, #4294967295
 80050ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b0:	3501      	adds	r5, #1
 80050b2:	e7c6      	b.n	8005042 <_printf_common+0x3e>
 80050b4:	18e1      	adds	r1, r4, r3
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	2030      	movs	r0, #48	; 0x30
 80050ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050be:	4422      	add	r2, r4
 80050c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050c8:	3302      	adds	r3, #2
 80050ca:	e7c7      	b.n	800505c <_printf_common+0x58>
 80050cc:	2301      	movs	r3, #1
 80050ce:	4622      	mov	r2, r4
 80050d0:	4649      	mov	r1, r9
 80050d2:	4638      	mov	r0, r7
 80050d4:	47c0      	blx	r8
 80050d6:	3001      	adds	r0, #1
 80050d8:	d0e6      	beq.n	80050a8 <_printf_common+0xa4>
 80050da:	3601      	adds	r6, #1
 80050dc:	e7d9      	b.n	8005092 <_printf_common+0x8e>
	...

080050e0 <_printf_i>:
 80050e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e4:	460c      	mov	r4, r1
 80050e6:	4691      	mov	r9, r2
 80050e8:	7e27      	ldrb	r7, [r4, #24]
 80050ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80050ec:	2f78      	cmp	r7, #120	; 0x78
 80050ee:	4680      	mov	r8, r0
 80050f0:	469a      	mov	sl, r3
 80050f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050f6:	d807      	bhi.n	8005108 <_printf_i+0x28>
 80050f8:	2f62      	cmp	r7, #98	; 0x62
 80050fa:	d80a      	bhi.n	8005112 <_printf_i+0x32>
 80050fc:	2f00      	cmp	r7, #0
 80050fe:	f000 80d8 	beq.w	80052b2 <_printf_i+0x1d2>
 8005102:	2f58      	cmp	r7, #88	; 0x58
 8005104:	f000 80a3 	beq.w	800524e <_printf_i+0x16e>
 8005108:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800510c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005110:	e03a      	b.n	8005188 <_printf_i+0xa8>
 8005112:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005116:	2b15      	cmp	r3, #21
 8005118:	d8f6      	bhi.n	8005108 <_printf_i+0x28>
 800511a:	a001      	add	r0, pc, #4	; (adr r0, 8005120 <_printf_i+0x40>)
 800511c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005120:	08005179 	.word	0x08005179
 8005124:	0800518d 	.word	0x0800518d
 8005128:	08005109 	.word	0x08005109
 800512c:	08005109 	.word	0x08005109
 8005130:	08005109 	.word	0x08005109
 8005134:	08005109 	.word	0x08005109
 8005138:	0800518d 	.word	0x0800518d
 800513c:	08005109 	.word	0x08005109
 8005140:	08005109 	.word	0x08005109
 8005144:	08005109 	.word	0x08005109
 8005148:	08005109 	.word	0x08005109
 800514c:	08005299 	.word	0x08005299
 8005150:	080051bd 	.word	0x080051bd
 8005154:	0800527b 	.word	0x0800527b
 8005158:	08005109 	.word	0x08005109
 800515c:	08005109 	.word	0x08005109
 8005160:	080052bb 	.word	0x080052bb
 8005164:	08005109 	.word	0x08005109
 8005168:	080051bd 	.word	0x080051bd
 800516c:	08005109 	.word	0x08005109
 8005170:	08005109 	.word	0x08005109
 8005174:	08005283 	.word	0x08005283
 8005178:	680b      	ldr	r3, [r1, #0]
 800517a:	1d1a      	adds	r2, r3, #4
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	600a      	str	r2, [r1, #0]
 8005180:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005188:	2301      	movs	r3, #1
 800518a:	e0a3      	b.n	80052d4 <_printf_i+0x1f4>
 800518c:	6825      	ldr	r5, [r4, #0]
 800518e:	6808      	ldr	r0, [r1, #0]
 8005190:	062e      	lsls	r6, r5, #24
 8005192:	f100 0304 	add.w	r3, r0, #4
 8005196:	d50a      	bpl.n	80051ae <_printf_i+0xce>
 8005198:	6805      	ldr	r5, [r0, #0]
 800519a:	600b      	str	r3, [r1, #0]
 800519c:	2d00      	cmp	r5, #0
 800519e:	da03      	bge.n	80051a8 <_printf_i+0xc8>
 80051a0:	232d      	movs	r3, #45	; 0x2d
 80051a2:	426d      	negs	r5, r5
 80051a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051a8:	485e      	ldr	r0, [pc, #376]	; (8005324 <_printf_i+0x244>)
 80051aa:	230a      	movs	r3, #10
 80051ac:	e019      	b.n	80051e2 <_printf_i+0x102>
 80051ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80051b2:	6805      	ldr	r5, [r0, #0]
 80051b4:	600b      	str	r3, [r1, #0]
 80051b6:	bf18      	it	ne
 80051b8:	b22d      	sxthne	r5, r5
 80051ba:	e7ef      	b.n	800519c <_printf_i+0xbc>
 80051bc:	680b      	ldr	r3, [r1, #0]
 80051be:	6825      	ldr	r5, [r4, #0]
 80051c0:	1d18      	adds	r0, r3, #4
 80051c2:	6008      	str	r0, [r1, #0]
 80051c4:	0628      	lsls	r0, r5, #24
 80051c6:	d501      	bpl.n	80051cc <_printf_i+0xec>
 80051c8:	681d      	ldr	r5, [r3, #0]
 80051ca:	e002      	b.n	80051d2 <_printf_i+0xf2>
 80051cc:	0669      	lsls	r1, r5, #25
 80051ce:	d5fb      	bpl.n	80051c8 <_printf_i+0xe8>
 80051d0:	881d      	ldrh	r5, [r3, #0]
 80051d2:	4854      	ldr	r0, [pc, #336]	; (8005324 <_printf_i+0x244>)
 80051d4:	2f6f      	cmp	r7, #111	; 0x6f
 80051d6:	bf0c      	ite	eq
 80051d8:	2308      	moveq	r3, #8
 80051da:	230a      	movne	r3, #10
 80051dc:	2100      	movs	r1, #0
 80051de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051e2:	6866      	ldr	r6, [r4, #4]
 80051e4:	60a6      	str	r6, [r4, #8]
 80051e6:	2e00      	cmp	r6, #0
 80051e8:	bfa2      	ittt	ge
 80051ea:	6821      	ldrge	r1, [r4, #0]
 80051ec:	f021 0104 	bicge.w	r1, r1, #4
 80051f0:	6021      	strge	r1, [r4, #0]
 80051f2:	b90d      	cbnz	r5, 80051f8 <_printf_i+0x118>
 80051f4:	2e00      	cmp	r6, #0
 80051f6:	d04d      	beq.n	8005294 <_printf_i+0x1b4>
 80051f8:	4616      	mov	r6, r2
 80051fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80051fe:	fb03 5711 	mls	r7, r3, r1, r5
 8005202:	5dc7      	ldrb	r7, [r0, r7]
 8005204:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005208:	462f      	mov	r7, r5
 800520a:	42bb      	cmp	r3, r7
 800520c:	460d      	mov	r5, r1
 800520e:	d9f4      	bls.n	80051fa <_printf_i+0x11a>
 8005210:	2b08      	cmp	r3, #8
 8005212:	d10b      	bne.n	800522c <_printf_i+0x14c>
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	07df      	lsls	r7, r3, #31
 8005218:	d508      	bpl.n	800522c <_printf_i+0x14c>
 800521a:	6923      	ldr	r3, [r4, #16]
 800521c:	6861      	ldr	r1, [r4, #4]
 800521e:	4299      	cmp	r1, r3
 8005220:	bfde      	ittt	le
 8005222:	2330      	movle	r3, #48	; 0x30
 8005224:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005228:	f106 36ff 	addle.w	r6, r6, #4294967295
 800522c:	1b92      	subs	r2, r2, r6
 800522e:	6122      	str	r2, [r4, #16]
 8005230:	f8cd a000 	str.w	sl, [sp]
 8005234:	464b      	mov	r3, r9
 8005236:	aa03      	add	r2, sp, #12
 8005238:	4621      	mov	r1, r4
 800523a:	4640      	mov	r0, r8
 800523c:	f7ff fee2 	bl	8005004 <_printf_common>
 8005240:	3001      	adds	r0, #1
 8005242:	d14c      	bne.n	80052de <_printf_i+0x1fe>
 8005244:	f04f 30ff 	mov.w	r0, #4294967295
 8005248:	b004      	add	sp, #16
 800524a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800524e:	4835      	ldr	r0, [pc, #212]	; (8005324 <_printf_i+0x244>)
 8005250:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	680e      	ldr	r6, [r1, #0]
 8005258:	061f      	lsls	r7, r3, #24
 800525a:	f856 5b04 	ldr.w	r5, [r6], #4
 800525e:	600e      	str	r6, [r1, #0]
 8005260:	d514      	bpl.n	800528c <_printf_i+0x1ac>
 8005262:	07d9      	lsls	r1, r3, #31
 8005264:	bf44      	itt	mi
 8005266:	f043 0320 	orrmi.w	r3, r3, #32
 800526a:	6023      	strmi	r3, [r4, #0]
 800526c:	b91d      	cbnz	r5, 8005276 <_printf_i+0x196>
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	f023 0320 	bic.w	r3, r3, #32
 8005274:	6023      	str	r3, [r4, #0]
 8005276:	2310      	movs	r3, #16
 8005278:	e7b0      	b.n	80051dc <_printf_i+0xfc>
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	f043 0320 	orr.w	r3, r3, #32
 8005280:	6023      	str	r3, [r4, #0]
 8005282:	2378      	movs	r3, #120	; 0x78
 8005284:	4828      	ldr	r0, [pc, #160]	; (8005328 <_printf_i+0x248>)
 8005286:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800528a:	e7e3      	b.n	8005254 <_printf_i+0x174>
 800528c:	065e      	lsls	r6, r3, #25
 800528e:	bf48      	it	mi
 8005290:	b2ad      	uxthmi	r5, r5
 8005292:	e7e6      	b.n	8005262 <_printf_i+0x182>
 8005294:	4616      	mov	r6, r2
 8005296:	e7bb      	b.n	8005210 <_printf_i+0x130>
 8005298:	680b      	ldr	r3, [r1, #0]
 800529a:	6826      	ldr	r6, [r4, #0]
 800529c:	6960      	ldr	r0, [r4, #20]
 800529e:	1d1d      	adds	r5, r3, #4
 80052a0:	600d      	str	r5, [r1, #0]
 80052a2:	0635      	lsls	r5, r6, #24
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	d501      	bpl.n	80052ac <_printf_i+0x1cc>
 80052a8:	6018      	str	r0, [r3, #0]
 80052aa:	e002      	b.n	80052b2 <_printf_i+0x1d2>
 80052ac:	0671      	lsls	r1, r6, #25
 80052ae:	d5fb      	bpl.n	80052a8 <_printf_i+0x1c8>
 80052b0:	8018      	strh	r0, [r3, #0]
 80052b2:	2300      	movs	r3, #0
 80052b4:	6123      	str	r3, [r4, #16]
 80052b6:	4616      	mov	r6, r2
 80052b8:	e7ba      	b.n	8005230 <_printf_i+0x150>
 80052ba:	680b      	ldr	r3, [r1, #0]
 80052bc:	1d1a      	adds	r2, r3, #4
 80052be:	600a      	str	r2, [r1, #0]
 80052c0:	681e      	ldr	r6, [r3, #0]
 80052c2:	6862      	ldr	r2, [r4, #4]
 80052c4:	2100      	movs	r1, #0
 80052c6:	4630      	mov	r0, r6
 80052c8:	f7fa ff82 	bl	80001d0 <memchr>
 80052cc:	b108      	cbz	r0, 80052d2 <_printf_i+0x1f2>
 80052ce:	1b80      	subs	r0, r0, r6
 80052d0:	6060      	str	r0, [r4, #4]
 80052d2:	6863      	ldr	r3, [r4, #4]
 80052d4:	6123      	str	r3, [r4, #16]
 80052d6:	2300      	movs	r3, #0
 80052d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052dc:	e7a8      	b.n	8005230 <_printf_i+0x150>
 80052de:	6923      	ldr	r3, [r4, #16]
 80052e0:	4632      	mov	r2, r6
 80052e2:	4649      	mov	r1, r9
 80052e4:	4640      	mov	r0, r8
 80052e6:	47d0      	blx	sl
 80052e8:	3001      	adds	r0, #1
 80052ea:	d0ab      	beq.n	8005244 <_printf_i+0x164>
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	079b      	lsls	r3, r3, #30
 80052f0:	d413      	bmi.n	800531a <_printf_i+0x23a>
 80052f2:	68e0      	ldr	r0, [r4, #12]
 80052f4:	9b03      	ldr	r3, [sp, #12]
 80052f6:	4298      	cmp	r0, r3
 80052f8:	bfb8      	it	lt
 80052fa:	4618      	movlt	r0, r3
 80052fc:	e7a4      	b.n	8005248 <_printf_i+0x168>
 80052fe:	2301      	movs	r3, #1
 8005300:	4632      	mov	r2, r6
 8005302:	4649      	mov	r1, r9
 8005304:	4640      	mov	r0, r8
 8005306:	47d0      	blx	sl
 8005308:	3001      	adds	r0, #1
 800530a:	d09b      	beq.n	8005244 <_printf_i+0x164>
 800530c:	3501      	adds	r5, #1
 800530e:	68e3      	ldr	r3, [r4, #12]
 8005310:	9903      	ldr	r1, [sp, #12]
 8005312:	1a5b      	subs	r3, r3, r1
 8005314:	42ab      	cmp	r3, r5
 8005316:	dcf2      	bgt.n	80052fe <_printf_i+0x21e>
 8005318:	e7eb      	b.n	80052f2 <_printf_i+0x212>
 800531a:	2500      	movs	r5, #0
 800531c:	f104 0619 	add.w	r6, r4, #25
 8005320:	e7f5      	b.n	800530e <_printf_i+0x22e>
 8005322:	bf00      	nop
 8005324:	08005e29 	.word	0x08005e29
 8005328:	08005e3a 	.word	0x08005e3a

0800532c <memcpy>:
 800532c:	440a      	add	r2, r1
 800532e:	4291      	cmp	r1, r2
 8005330:	f100 33ff 	add.w	r3, r0, #4294967295
 8005334:	d100      	bne.n	8005338 <memcpy+0xc>
 8005336:	4770      	bx	lr
 8005338:	b510      	push	{r4, lr}
 800533a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800533e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005342:	4291      	cmp	r1, r2
 8005344:	d1f9      	bne.n	800533a <memcpy+0xe>
 8005346:	bd10      	pop	{r4, pc}

08005348 <memmove>:
 8005348:	4288      	cmp	r0, r1
 800534a:	b510      	push	{r4, lr}
 800534c:	eb01 0402 	add.w	r4, r1, r2
 8005350:	d902      	bls.n	8005358 <memmove+0x10>
 8005352:	4284      	cmp	r4, r0
 8005354:	4623      	mov	r3, r4
 8005356:	d807      	bhi.n	8005368 <memmove+0x20>
 8005358:	1e43      	subs	r3, r0, #1
 800535a:	42a1      	cmp	r1, r4
 800535c:	d008      	beq.n	8005370 <memmove+0x28>
 800535e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005362:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005366:	e7f8      	b.n	800535a <memmove+0x12>
 8005368:	4402      	add	r2, r0
 800536a:	4601      	mov	r1, r0
 800536c:	428a      	cmp	r2, r1
 800536e:	d100      	bne.n	8005372 <memmove+0x2a>
 8005370:	bd10      	pop	{r4, pc}
 8005372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800537a:	e7f7      	b.n	800536c <memmove+0x24>

0800537c <_free_r>:
 800537c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800537e:	2900      	cmp	r1, #0
 8005380:	d048      	beq.n	8005414 <_free_r+0x98>
 8005382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005386:	9001      	str	r0, [sp, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	f1a1 0404 	sub.w	r4, r1, #4
 800538e:	bfb8      	it	lt
 8005390:	18e4      	addlt	r4, r4, r3
 8005392:	f000 f8d3 	bl	800553c <__malloc_lock>
 8005396:	4a20      	ldr	r2, [pc, #128]	; (8005418 <_free_r+0x9c>)
 8005398:	9801      	ldr	r0, [sp, #4]
 800539a:	6813      	ldr	r3, [r2, #0]
 800539c:	4615      	mov	r5, r2
 800539e:	b933      	cbnz	r3, 80053ae <_free_r+0x32>
 80053a0:	6063      	str	r3, [r4, #4]
 80053a2:	6014      	str	r4, [r2, #0]
 80053a4:	b003      	add	sp, #12
 80053a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053aa:	f000 b8cd 	b.w	8005548 <__malloc_unlock>
 80053ae:	42a3      	cmp	r3, r4
 80053b0:	d90b      	bls.n	80053ca <_free_r+0x4e>
 80053b2:	6821      	ldr	r1, [r4, #0]
 80053b4:	1862      	adds	r2, r4, r1
 80053b6:	4293      	cmp	r3, r2
 80053b8:	bf04      	itt	eq
 80053ba:	681a      	ldreq	r2, [r3, #0]
 80053bc:	685b      	ldreq	r3, [r3, #4]
 80053be:	6063      	str	r3, [r4, #4]
 80053c0:	bf04      	itt	eq
 80053c2:	1852      	addeq	r2, r2, r1
 80053c4:	6022      	streq	r2, [r4, #0]
 80053c6:	602c      	str	r4, [r5, #0]
 80053c8:	e7ec      	b.n	80053a4 <_free_r+0x28>
 80053ca:	461a      	mov	r2, r3
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	b10b      	cbz	r3, 80053d4 <_free_r+0x58>
 80053d0:	42a3      	cmp	r3, r4
 80053d2:	d9fa      	bls.n	80053ca <_free_r+0x4e>
 80053d4:	6811      	ldr	r1, [r2, #0]
 80053d6:	1855      	adds	r5, r2, r1
 80053d8:	42a5      	cmp	r5, r4
 80053da:	d10b      	bne.n	80053f4 <_free_r+0x78>
 80053dc:	6824      	ldr	r4, [r4, #0]
 80053de:	4421      	add	r1, r4
 80053e0:	1854      	adds	r4, r2, r1
 80053e2:	42a3      	cmp	r3, r4
 80053e4:	6011      	str	r1, [r2, #0]
 80053e6:	d1dd      	bne.n	80053a4 <_free_r+0x28>
 80053e8:	681c      	ldr	r4, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	6053      	str	r3, [r2, #4]
 80053ee:	4421      	add	r1, r4
 80053f0:	6011      	str	r1, [r2, #0]
 80053f2:	e7d7      	b.n	80053a4 <_free_r+0x28>
 80053f4:	d902      	bls.n	80053fc <_free_r+0x80>
 80053f6:	230c      	movs	r3, #12
 80053f8:	6003      	str	r3, [r0, #0]
 80053fa:	e7d3      	b.n	80053a4 <_free_r+0x28>
 80053fc:	6825      	ldr	r5, [r4, #0]
 80053fe:	1961      	adds	r1, r4, r5
 8005400:	428b      	cmp	r3, r1
 8005402:	bf04      	itt	eq
 8005404:	6819      	ldreq	r1, [r3, #0]
 8005406:	685b      	ldreq	r3, [r3, #4]
 8005408:	6063      	str	r3, [r4, #4]
 800540a:	bf04      	itt	eq
 800540c:	1949      	addeq	r1, r1, r5
 800540e:	6021      	streq	r1, [r4, #0]
 8005410:	6054      	str	r4, [r2, #4]
 8005412:	e7c7      	b.n	80053a4 <_free_r+0x28>
 8005414:	b003      	add	sp, #12
 8005416:	bd30      	pop	{r4, r5, pc}
 8005418:	200000c8 	.word	0x200000c8

0800541c <_malloc_r>:
 800541c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541e:	1ccd      	adds	r5, r1, #3
 8005420:	f025 0503 	bic.w	r5, r5, #3
 8005424:	3508      	adds	r5, #8
 8005426:	2d0c      	cmp	r5, #12
 8005428:	bf38      	it	cc
 800542a:	250c      	movcc	r5, #12
 800542c:	2d00      	cmp	r5, #0
 800542e:	4606      	mov	r6, r0
 8005430:	db01      	blt.n	8005436 <_malloc_r+0x1a>
 8005432:	42a9      	cmp	r1, r5
 8005434:	d903      	bls.n	800543e <_malloc_r+0x22>
 8005436:	230c      	movs	r3, #12
 8005438:	6033      	str	r3, [r6, #0]
 800543a:	2000      	movs	r0, #0
 800543c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800543e:	f000 f87d 	bl	800553c <__malloc_lock>
 8005442:	4921      	ldr	r1, [pc, #132]	; (80054c8 <_malloc_r+0xac>)
 8005444:	680a      	ldr	r2, [r1, #0]
 8005446:	4614      	mov	r4, r2
 8005448:	b99c      	cbnz	r4, 8005472 <_malloc_r+0x56>
 800544a:	4f20      	ldr	r7, [pc, #128]	; (80054cc <_malloc_r+0xb0>)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	b923      	cbnz	r3, 800545a <_malloc_r+0x3e>
 8005450:	4621      	mov	r1, r4
 8005452:	4630      	mov	r0, r6
 8005454:	f000 f862 	bl	800551c <_sbrk_r>
 8005458:	6038      	str	r0, [r7, #0]
 800545a:	4629      	mov	r1, r5
 800545c:	4630      	mov	r0, r6
 800545e:	f000 f85d 	bl	800551c <_sbrk_r>
 8005462:	1c43      	adds	r3, r0, #1
 8005464:	d123      	bne.n	80054ae <_malloc_r+0x92>
 8005466:	230c      	movs	r3, #12
 8005468:	6033      	str	r3, [r6, #0]
 800546a:	4630      	mov	r0, r6
 800546c:	f000 f86c 	bl	8005548 <__malloc_unlock>
 8005470:	e7e3      	b.n	800543a <_malloc_r+0x1e>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	1b5b      	subs	r3, r3, r5
 8005476:	d417      	bmi.n	80054a8 <_malloc_r+0x8c>
 8005478:	2b0b      	cmp	r3, #11
 800547a:	d903      	bls.n	8005484 <_malloc_r+0x68>
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	441c      	add	r4, r3
 8005480:	6025      	str	r5, [r4, #0]
 8005482:	e004      	b.n	800548e <_malloc_r+0x72>
 8005484:	6863      	ldr	r3, [r4, #4]
 8005486:	42a2      	cmp	r2, r4
 8005488:	bf0c      	ite	eq
 800548a:	600b      	streq	r3, [r1, #0]
 800548c:	6053      	strne	r3, [r2, #4]
 800548e:	4630      	mov	r0, r6
 8005490:	f000 f85a 	bl	8005548 <__malloc_unlock>
 8005494:	f104 000b 	add.w	r0, r4, #11
 8005498:	1d23      	adds	r3, r4, #4
 800549a:	f020 0007 	bic.w	r0, r0, #7
 800549e:	1ac2      	subs	r2, r0, r3
 80054a0:	d0cc      	beq.n	800543c <_malloc_r+0x20>
 80054a2:	1a1b      	subs	r3, r3, r0
 80054a4:	50a3      	str	r3, [r4, r2]
 80054a6:	e7c9      	b.n	800543c <_malloc_r+0x20>
 80054a8:	4622      	mov	r2, r4
 80054aa:	6864      	ldr	r4, [r4, #4]
 80054ac:	e7cc      	b.n	8005448 <_malloc_r+0x2c>
 80054ae:	1cc4      	adds	r4, r0, #3
 80054b0:	f024 0403 	bic.w	r4, r4, #3
 80054b4:	42a0      	cmp	r0, r4
 80054b6:	d0e3      	beq.n	8005480 <_malloc_r+0x64>
 80054b8:	1a21      	subs	r1, r4, r0
 80054ba:	4630      	mov	r0, r6
 80054bc:	f000 f82e 	bl	800551c <_sbrk_r>
 80054c0:	3001      	adds	r0, #1
 80054c2:	d1dd      	bne.n	8005480 <_malloc_r+0x64>
 80054c4:	e7cf      	b.n	8005466 <_malloc_r+0x4a>
 80054c6:	bf00      	nop
 80054c8:	200000c8 	.word	0x200000c8
 80054cc:	200000cc 	.word	0x200000cc

080054d0 <_realloc_r>:
 80054d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d2:	4607      	mov	r7, r0
 80054d4:	4614      	mov	r4, r2
 80054d6:	460e      	mov	r6, r1
 80054d8:	b921      	cbnz	r1, 80054e4 <_realloc_r+0x14>
 80054da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80054de:	4611      	mov	r1, r2
 80054e0:	f7ff bf9c 	b.w	800541c <_malloc_r>
 80054e4:	b922      	cbnz	r2, 80054f0 <_realloc_r+0x20>
 80054e6:	f7ff ff49 	bl	800537c <_free_r>
 80054ea:	4625      	mov	r5, r4
 80054ec:	4628      	mov	r0, r5
 80054ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054f0:	f000 f830 	bl	8005554 <_malloc_usable_size_r>
 80054f4:	42a0      	cmp	r0, r4
 80054f6:	d20f      	bcs.n	8005518 <_realloc_r+0x48>
 80054f8:	4621      	mov	r1, r4
 80054fa:	4638      	mov	r0, r7
 80054fc:	f7ff ff8e 	bl	800541c <_malloc_r>
 8005500:	4605      	mov	r5, r0
 8005502:	2800      	cmp	r0, #0
 8005504:	d0f2      	beq.n	80054ec <_realloc_r+0x1c>
 8005506:	4631      	mov	r1, r6
 8005508:	4622      	mov	r2, r4
 800550a:	f7ff ff0f 	bl	800532c <memcpy>
 800550e:	4631      	mov	r1, r6
 8005510:	4638      	mov	r0, r7
 8005512:	f7ff ff33 	bl	800537c <_free_r>
 8005516:	e7e9      	b.n	80054ec <_realloc_r+0x1c>
 8005518:	4635      	mov	r5, r6
 800551a:	e7e7      	b.n	80054ec <_realloc_r+0x1c>

0800551c <_sbrk_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4d06      	ldr	r5, [pc, #24]	; (8005538 <_sbrk_r+0x1c>)
 8005520:	2300      	movs	r3, #0
 8005522:	4604      	mov	r4, r0
 8005524:	4608      	mov	r0, r1
 8005526:	602b      	str	r3, [r5, #0]
 8005528:	f7fc faf0 	bl	8001b0c <_sbrk>
 800552c:	1c43      	adds	r3, r0, #1
 800552e:	d102      	bne.n	8005536 <_sbrk_r+0x1a>
 8005530:	682b      	ldr	r3, [r5, #0]
 8005532:	b103      	cbz	r3, 8005536 <_sbrk_r+0x1a>
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	bd38      	pop	{r3, r4, r5, pc}
 8005538:	20000244 	.word	0x20000244

0800553c <__malloc_lock>:
 800553c:	4801      	ldr	r0, [pc, #4]	; (8005544 <__malloc_lock+0x8>)
 800553e:	f000 b811 	b.w	8005564 <__retarget_lock_acquire_recursive>
 8005542:	bf00      	nop
 8005544:	2000024c 	.word	0x2000024c

08005548 <__malloc_unlock>:
 8005548:	4801      	ldr	r0, [pc, #4]	; (8005550 <__malloc_unlock+0x8>)
 800554a:	f000 b80c 	b.w	8005566 <__retarget_lock_release_recursive>
 800554e:	bf00      	nop
 8005550:	2000024c 	.word	0x2000024c

08005554 <_malloc_usable_size_r>:
 8005554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005558:	1f18      	subs	r0, r3, #4
 800555a:	2b00      	cmp	r3, #0
 800555c:	bfbc      	itt	lt
 800555e:	580b      	ldrlt	r3, [r1, r0]
 8005560:	18c0      	addlt	r0, r0, r3
 8005562:	4770      	bx	lr

08005564 <__retarget_lock_acquire_recursive>:
 8005564:	4770      	bx	lr

08005566 <__retarget_lock_release_recursive>:
 8005566:	4770      	bx	lr

08005568 <_init>:
 8005568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556a:	bf00      	nop
 800556c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556e:	bc08      	pop	{r3}
 8005570:	469e      	mov	lr, r3
 8005572:	4770      	bx	lr

08005574 <_fini>:
 8005574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005576:	bf00      	nop
 8005578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557a:	bc08      	pop	{r3}
 800557c:	469e      	mov	lr, r3
 800557e:	4770      	bx	lr
